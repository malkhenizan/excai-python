// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../resource';
import { isRequestOptions } from '../../core';
import * as Core from '../../core';
import * as MessagesAPI from './messages';
import * as Shared from '../shared';
import * as ThreadsAPI from './threads';

export class Messages extends APIResource {
  /**
   * Create a message.
   *
   * @example
   * ```ts
   * const message = await client.threads.messages.create(
   *   'thread_id',
   *   { content: 'string', role: 'user' },
   * );
   * ```
   */
  create(
    threadId: string,
    body: MessageCreateParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<MessageCreateResponse> {
    return this._client.post(`/threads/${threadId}/messages`, { body, ...options });
  }

  /**
   * Retrieve a message.
   *
   * @example
   * ```ts
   * const message = await client.threads.messages.retrieve(
   *   'thread_id',
   *   'message_id',
   * );
   * ```
   */
  retrieve(
    threadId: string,
    messageId: string,
    options?: Core.RequestOptions,
  ): Core.APIPromise<MessageRetrieveResponse> {
    return this._client.get(`/threads/${threadId}/messages/${messageId}`, options);
  }

  /**
   * Modifies a message.
   *
   * @example
   * ```ts
   * const message = await client.threads.messages.update(
   *   'thread_id',
   *   'message_id',
   * );
   * ```
   */
  update(
    threadId: string,
    messageId: string,
    body: MessageUpdateParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<MessageUpdateResponse> {
    return this._client.post(`/threads/${threadId}/messages/${messageId}`, { body, ...options });
  }

  /**
   * Returns a list of messages for a given thread.
   *
   * @example
   * ```ts
   * const messages = await client.threads.messages.list(
   *   'thread_id',
   * );
   * ```
   */
  list(
    threadId: string,
    query?: MessageListParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<MessageListResponse>;
  list(threadId: string, options?: Core.RequestOptions): Core.APIPromise<MessageListResponse>;
  list(
    threadId: string,
    query: MessageListParams | Core.RequestOptions = {},
    options?: Core.RequestOptions,
  ): Core.APIPromise<MessageListResponse> {
    if (isRequestOptions(query)) {
      return this.list(threadId, {}, query);
    }
    return this._client.get(`/threads/${threadId}/messages`, { query, ...options });
  }

  /**
   * Deletes a message.
   *
   * @example
   * ```ts
   * const message = await client.threads.messages.delete(
   *   'thread_id',
   *   'message_id',
   * );
   * ```
   */
  delete(
    threadId: string,
    messageId: string,
    options?: Core.RequestOptions,
  ): Core.APIPromise<MessageDeleteResponse> {
    return this._client.delete(`/threads/${threadId}/messages/${messageId}`, options);
  }
}

/**
 * References an image [File](https://platform.excai.com/docs/api-reference/files)
 * in the content of a message.
 */
export interface MessageContentImageFileObject {
  image_file: MessageContentImageFileObject.ImageFile;

  /**
   * Always `image_file`.
   */
  type: 'image_file';
}

export namespace MessageContentImageFileObject {
  export interface ImageFile {
    /**
     * The [File](https://platform.excai.com/docs/api-reference/files) ID of the image
     * in the message content. Set `purpose="vision"` when uploading the File if you
     * need to later display the file content.
     */
    file_id: string;

    /**
     * Specifies the detail level of the image if specified by the user. `low` uses
     * fewer tokens, you can opt in to high resolution using `high`.
     */
    detail?: 'auto' | 'low' | 'high';
  }
}

/**
 * References an image URL in the content of a message.
 */
export interface MessageContentImageURLObject {
  image_url: MessageContentImageURLObject.ImageURL;

  /**
   * The type of the content part.
   */
  type: 'image_url';
}

export namespace MessageContentImageURLObject {
  export interface ImageURL {
    /**
     * The external URL of the image, must be a supported image types: jpeg, jpg, png,
     * gif, webp.
     */
    url: string;

    /**
     * Specifies the detail level of the image. `low` uses fewer tokens, you can opt in
     * to high resolution using `high`. Default value is `auto`
     */
    detail?: 'auto' | 'low' | 'high';
  }
}

/**
 * The refusal content generated by the assistant.
 */
export interface MessageContentRefusalObject {
  refusal: string;

  /**
   * Always `refusal`.
   */
  type: 'refusal';
}

/**
 * A citation within the message that points to a specific quote from a specific
 * File associated with the assistant or the message. Generated when the assistant
 * uses the "file_search" tool to search files.
 */
export interface MessageContentTextAnnotationsFileCitationObject {
  end_index: number;

  file_citation: MessageContentTextAnnotationsFileCitationObject.FileCitation;

  start_index: number;

  /**
   * The text in the message content that needs to be replaced.
   */
  text: string;

  /**
   * Always `file_citation`.
   */
  type: 'file_citation';
}

export namespace MessageContentTextAnnotationsFileCitationObject {
  export interface FileCitation {
    /**
     * The ID of the specific File the citation is from.
     */
    file_id: string;
  }
}

/**
 * A URL for the file that's generated when the assistant used the
 * `code_interpreter` tool to generate a file.
 */
export interface MessageContentTextAnnotationsFilePathObject {
  end_index: number;

  file_path: MessageContentTextAnnotationsFilePathObject.FilePath;

  start_index: number;

  /**
   * The text in the message content that needs to be replaced.
   */
  text: string;

  /**
   * Always `file_path`.
   */
  type: 'file_path';
}

export namespace MessageContentTextAnnotationsFilePathObject {
  export interface FilePath {
    /**
     * The ID of the file that was generated.
     */
    file_id: string;
  }
}

/**
 * The text content that is part of a message.
 */
export interface MessageContentTextObject {
  text: MessageContentTextObject.Text;

  /**
   * Always `text`.
   */
  type: 'text';
}

export namespace MessageContentTextObject {
  export interface Text {
    annotations: Array<
      | MessagesAPI.MessageContentTextAnnotationsFileCitationObject
      | MessagesAPI.MessageContentTextAnnotationsFilePathObject
    >;

    /**
     * The data that makes up the text.
     */
    value: string;
  }
}

/**
 * Represents a message within a
 * [thread](https://platform.excai.com/docs/api-reference/threads).
 */
export interface MessageCreateResponse {
  /**
   * The identifier, which can be referenced in API endpoints.
   */
  id: string;

  /**
   * If applicable, the ID of the
   * [assistant](https://platform.excai.com/docs/api-reference/assistants) that
   * authored this message.
   */
  assistant_id: string | null;

  /**
   * A list of files attached to the message, and the tools they were added to.
   */
  attachments: Array<MessageCreateResponse.Attachment> | null;

  /**
   * The Unix timestamp (in seconds) for when the message was completed.
   */
  completed_at: number | null;

  /**
   * The content of the message in array of text and/or images.
   */
  content: Array<
    | MessageContentImageFileObject
    | MessageContentImageURLObject
    | MessageContentTextObject
    | MessageContentRefusalObject
  >;

  /**
   * The Unix timestamp (in seconds) for when the message was created.
   */
  created_at: number;

  /**
   * The Unix timestamp (in seconds) for when the message was marked as incomplete.
   */
  incomplete_at: number | null;

  /**
   * On an incomplete message, details about why the message is incomplete.
   */
  incomplete_details: MessageCreateResponse.IncompleteDetails | null;

  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful
   * for storing additional information about the object in a structured format, and
   * querying for objects via API or the dashboard.
   *
   * Keys are strings with a maximum length of 64 characters. Values are strings with
   * a maximum length of 512 characters.
   */
  metadata: { [key: string]: string } | null;

  /**
   * The object type, which is always `thread.message`.
   */
  object: 'thread.message';

  /**
   * The entity that produced the message. One of `user` or `assistant`.
   */
  role: 'user' | 'assistant';

  /**
   * The ID of the [run](https://platform.excai.com/docs/api-reference/runs)
   * associated with the creation of this message. Value is `null` when messages are
   * created manually using the create message or create thread endpoints.
   */
  run_id: string | null;

  /**
   * The status of the message, which can be either `in_progress`, `incomplete`, or
   * `completed`.
   */
  status: 'in_progress' | 'incomplete' | 'completed';

  /**
   * The [thread](https://platform.excai.com/docs/api-reference/threads) ID that this
   * message belongs to.
   */
  thread_id: string;
}

export namespace MessageCreateResponse {
  export interface Attachment {
    /**
     * The ID of the file to attach to the message.
     */
    file_id?: string;

    /**
     * The tools to add this file to.
     */
    tools?: Array<Shared.AssistantToolsCode | ThreadsAPI.AssistantToolsFileSearchTypeOnly>;
  }

  /**
   * On an incomplete message, details about why the message is incomplete.
   */
  export interface IncompleteDetails {
    /**
     * The reason the message is incomplete.
     */
    reason: 'content_filter' | 'max_tokens' | 'run_cancelled' | 'run_expired' | 'run_failed';
  }
}

/**
 * Represents a message within a
 * [thread](https://platform.excai.com/docs/api-reference/threads).
 */
export interface MessageRetrieveResponse {
  /**
   * The identifier, which can be referenced in API endpoints.
   */
  id: string;

  /**
   * If applicable, the ID of the
   * [assistant](https://platform.excai.com/docs/api-reference/assistants) that
   * authored this message.
   */
  assistant_id: string | null;

  /**
   * A list of files attached to the message, and the tools they were added to.
   */
  attachments: Array<MessageRetrieveResponse.Attachment> | null;

  /**
   * The Unix timestamp (in seconds) for when the message was completed.
   */
  completed_at: number | null;

  /**
   * The content of the message in array of text and/or images.
   */
  content: Array<
    | MessageContentImageFileObject
    | MessageContentImageURLObject
    | MessageContentTextObject
    | MessageContentRefusalObject
  >;

  /**
   * The Unix timestamp (in seconds) for when the message was created.
   */
  created_at: number;

  /**
   * The Unix timestamp (in seconds) for when the message was marked as incomplete.
   */
  incomplete_at: number | null;

  /**
   * On an incomplete message, details about why the message is incomplete.
   */
  incomplete_details: MessageRetrieveResponse.IncompleteDetails | null;

  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful
   * for storing additional information about the object in a structured format, and
   * querying for objects via API or the dashboard.
   *
   * Keys are strings with a maximum length of 64 characters. Values are strings with
   * a maximum length of 512 characters.
   */
  metadata: { [key: string]: string } | null;

  /**
   * The object type, which is always `thread.message`.
   */
  object: 'thread.message';

  /**
   * The entity that produced the message. One of `user` or `assistant`.
   */
  role: 'user' | 'assistant';

  /**
   * The ID of the [run](https://platform.excai.com/docs/api-reference/runs)
   * associated with the creation of this message. Value is `null` when messages are
   * created manually using the create message or create thread endpoints.
   */
  run_id: string | null;

  /**
   * The status of the message, which can be either `in_progress`, `incomplete`, or
   * `completed`.
   */
  status: 'in_progress' | 'incomplete' | 'completed';

  /**
   * The [thread](https://platform.excai.com/docs/api-reference/threads) ID that this
   * message belongs to.
   */
  thread_id: string;
}

export namespace MessageRetrieveResponse {
  export interface Attachment {
    /**
     * The ID of the file to attach to the message.
     */
    file_id?: string;

    /**
     * The tools to add this file to.
     */
    tools?: Array<Shared.AssistantToolsCode | ThreadsAPI.AssistantToolsFileSearchTypeOnly>;
  }

  /**
   * On an incomplete message, details about why the message is incomplete.
   */
  export interface IncompleteDetails {
    /**
     * The reason the message is incomplete.
     */
    reason: 'content_filter' | 'max_tokens' | 'run_cancelled' | 'run_expired' | 'run_failed';
  }
}

/**
 * Represents a message within a
 * [thread](https://platform.excai.com/docs/api-reference/threads).
 */
export interface MessageUpdateResponse {
  /**
   * The identifier, which can be referenced in API endpoints.
   */
  id: string;

  /**
   * If applicable, the ID of the
   * [assistant](https://platform.excai.com/docs/api-reference/assistants) that
   * authored this message.
   */
  assistant_id: string | null;

  /**
   * A list of files attached to the message, and the tools they were added to.
   */
  attachments: Array<MessageUpdateResponse.Attachment> | null;

  /**
   * The Unix timestamp (in seconds) for when the message was completed.
   */
  completed_at: number | null;

  /**
   * The content of the message in array of text and/or images.
   */
  content: Array<
    | MessageContentImageFileObject
    | MessageContentImageURLObject
    | MessageContentTextObject
    | MessageContentRefusalObject
  >;

  /**
   * The Unix timestamp (in seconds) for when the message was created.
   */
  created_at: number;

  /**
   * The Unix timestamp (in seconds) for when the message was marked as incomplete.
   */
  incomplete_at: number | null;

  /**
   * On an incomplete message, details about why the message is incomplete.
   */
  incomplete_details: MessageUpdateResponse.IncompleteDetails | null;

  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful
   * for storing additional information about the object in a structured format, and
   * querying for objects via API or the dashboard.
   *
   * Keys are strings with a maximum length of 64 characters. Values are strings with
   * a maximum length of 512 characters.
   */
  metadata: { [key: string]: string } | null;

  /**
   * The object type, which is always `thread.message`.
   */
  object: 'thread.message';

  /**
   * The entity that produced the message. One of `user` or `assistant`.
   */
  role: 'user' | 'assistant';

  /**
   * The ID of the [run](https://platform.excai.com/docs/api-reference/runs)
   * associated with the creation of this message. Value is `null` when messages are
   * created manually using the create message or create thread endpoints.
   */
  run_id: string | null;

  /**
   * The status of the message, which can be either `in_progress`, `incomplete`, or
   * `completed`.
   */
  status: 'in_progress' | 'incomplete' | 'completed';

  /**
   * The [thread](https://platform.excai.com/docs/api-reference/threads) ID that this
   * message belongs to.
   */
  thread_id: string;
}

export namespace MessageUpdateResponse {
  export interface Attachment {
    /**
     * The ID of the file to attach to the message.
     */
    file_id?: string;

    /**
     * The tools to add this file to.
     */
    tools?: Array<Shared.AssistantToolsCode | ThreadsAPI.AssistantToolsFileSearchTypeOnly>;
  }

  /**
   * On an incomplete message, details about why the message is incomplete.
   */
  export interface IncompleteDetails {
    /**
     * The reason the message is incomplete.
     */
    reason: 'content_filter' | 'max_tokens' | 'run_cancelled' | 'run_expired' | 'run_failed';
  }
}

export interface MessageListResponse {
  data: Array<MessageListResponse.Data>;

  first_id: string;

  has_more: boolean;

  last_id: string;

  object: string;
}

export namespace MessageListResponse {
  /**
   * Represents a message within a
   * [thread](https://platform.excai.com/docs/api-reference/threads).
   */
  export interface Data {
    /**
     * The identifier, which can be referenced in API endpoints.
     */
    id: string;

    /**
     * If applicable, the ID of the
     * [assistant](https://platform.excai.com/docs/api-reference/assistants) that
     * authored this message.
     */
    assistant_id: string | null;

    /**
     * A list of files attached to the message, and the tools they were added to.
     */
    attachments: Array<Data.Attachment> | null;

    /**
     * The Unix timestamp (in seconds) for when the message was completed.
     */
    completed_at: number | null;

    /**
     * The content of the message in array of text and/or images.
     */
    content: Array<
      | MessagesAPI.MessageContentImageFileObject
      | MessagesAPI.MessageContentImageURLObject
      | MessagesAPI.MessageContentTextObject
      | MessagesAPI.MessageContentRefusalObject
    >;

    /**
     * The Unix timestamp (in seconds) for when the message was created.
     */
    created_at: number;

    /**
     * The Unix timestamp (in seconds) for when the message was marked as incomplete.
     */
    incomplete_at: number | null;

    /**
     * On an incomplete message, details about why the message is incomplete.
     */
    incomplete_details: Data.IncompleteDetails | null;

    /**
     * Set of 16 key-value pairs that can be attached to an object. This can be useful
     * for storing additional information about the object in a structured format, and
     * querying for objects via API or the dashboard.
     *
     * Keys are strings with a maximum length of 64 characters. Values are strings with
     * a maximum length of 512 characters.
     */
    metadata: { [key: string]: string } | null;

    /**
     * The object type, which is always `thread.message`.
     */
    object: 'thread.message';

    /**
     * The entity that produced the message. One of `user` or `assistant`.
     */
    role: 'user' | 'assistant';

    /**
     * The ID of the [run](https://platform.excai.com/docs/api-reference/runs)
     * associated with the creation of this message. Value is `null` when messages are
     * created manually using the create message or create thread endpoints.
     */
    run_id: string | null;

    /**
     * The status of the message, which can be either `in_progress`, `incomplete`, or
     * `completed`.
     */
    status: 'in_progress' | 'incomplete' | 'completed';

    /**
     * The [thread](https://platform.excai.com/docs/api-reference/threads) ID that this
     * message belongs to.
     */
    thread_id: string;
  }

  export namespace Data {
    export interface Attachment {
      /**
       * The ID of the file to attach to the message.
       */
      file_id?: string;

      /**
       * The tools to add this file to.
       */
      tools?: Array<Shared.AssistantToolsCode | ThreadsAPI.AssistantToolsFileSearchTypeOnly>;
    }

    /**
     * On an incomplete message, details about why the message is incomplete.
     */
    export interface IncompleteDetails {
      /**
       * The reason the message is incomplete.
       */
      reason: 'content_filter' | 'max_tokens' | 'run_cancelled' | 'run_expired' | 'run_failed';
    }
  }
}

export interface MessageDeleteResponse {
  id: string;

  deleted: boolean;

  object: 'thread.message.deleted';
}

export interface MessageCreateParams {
  /**
   * The text contents of the message.
   */
  content:
    | string
    | Array<MessageContentImageFileObject | MessageContentImageURLObject | MessageCreateParams.Text>;

  /**
   * The role of the entity that is creating the message. Allowed values include:
   *
   * - `user`: Indicates the message is sent by an actual user and should be used in
   *   most cases to represent user-generated messages.
   * - `assistant`: Indicates the message is generated by the assistant. Use this
   *   value to insert messages from the assistant into the conversation.
   */
  role: 'user' | 'assistant';

  /**
   * A list of files attached to the message, and the tools they should be added to.
   */
  attachments?: Array<MessageCreateParams.Attachment> | null;

  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful
   * for storing additional information about the object in a structured format, and
   * querying for objects via API or the dashboard.
   *
   * Keys are strings with a maximum length of 64 characters. Values are strings with
   * a maximum length of 512 characters.
   */
  metadata?: { [key: string]: string } | null;
}

export namespace MessageCreateParams {
  /**
   * The text content that is part of a message.
   */
  export interface Text {
    /**
     * Text content to be sent to the model
     */
    text: string;

    /**
     * Always `text`.
     */
    type: 'text';
  }

  export interface Attachment {
    /**
     * The ID of the file to attach to the message.
     */
    file_id?: string;

    /**
     * The tools to add this file to.
     */
    tools?: Array<Shared.AssistantToolsCode | ThreadsAPI.AssistantToolsFileSearchTypeOnly>;
  }
}

export interface MessageUpdateParams {
  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful
   * for storing additional information about the object in a structured format, and
   * querying for objects via API or the dashboard.
   *
   * Keys are strings with a maximum length of 64 characters. Values are strings with
   * a maximum length of 512 characters.
   */
  metadata?: { [key: string]: string } | null;
}

export interface MessageListParams {
  /**
   * A cursor for use in pagination. `after` is an object ID that defines your place
   * in the list. For instance, if you make a list request and receive 100 objects,
   * ending with obj_foo, your subsequent call can include after=obj_foo in order to
   * fetch the next page of the list.
   */
  after?: string;

  /**
   * A cursor for use in pagination. `before` is an object ID that defines your place
   * in the list. For instance, if you make a list request and receive 100 objects,
   * starting with obj_foo, your subsequent call can include before=obj_foo in order
   * to fetch the previous page of the list.
   */
  before?: string;

  /**
   * A limit on the number of objects to be returned. Limit can range between 1 and
   * 100, and the default is 20.
   */
  limit?: number;

  /**
   * Sort order by the `created_at` timestamp of the objects. `asc` for ascending
   * order and `desc` for descending order.
   */
  order?: 'asc' | 'desc';

  /**
   * Filter messages by the run ID that generated them.
   */
  run_id?: string;
}

export declare namespace Messages {
  export {
    type MessageContentImageFileObject as MessageContentImageFileObject,
    type MessageContentImageURLObject as MessageContentImageURLObject,
    type MessageContentRefusalObject as MessageContentRefusalObject,
    type MessageContentTextAnnotationsFileCitationObject as MessageContentTextAnnotationsFileCitationObject,
    type MessageContentTextAnnotationsFilePathObject as MessageContentTextAnnotationsFilePathObject,
    type MessageContentTextObject as MessageContentTextObject,
    type MessageCreateResponse as MessageCreateResponse,
    type MessageRetrieveResponse as MessageRetrieveResponse,
    type MessageUpdateResponse as MessageUpdateResponse,
    type MessageListResponse as MessageListResponse,
    type MessageDeleteResponse as MessageDeleteResponse,
    type MessageCreateParams as MessageCreateParams,
    type MessageUpdateParams as MessageUpdateParams,
    type MessageListParams as MessageListParams,
  };
}
