// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../resource';
import { isRequestOptions } from '../core';
import * as Core from '../core';
import * as Shared from './shared';
import * as ItemsAPI from './conversations/items';
import * as RunsAPI from './evals/runs/runs';

export class Responses extends APIResource {
  /**
   * Creates a model response. Provide
   * [text](https://platform.excai.com/docs/guides/text) or
   * [image](https://platform.excai.com/docs/guides/images) inputs to generate
   * [text](https://platform.excai.com/docs/guides/text) or
   * [JSON](https://platform.excai.com/docs/guides/structured-outputs) outputs. Have
   * the model call your own
   * [custom code](https://platform.excai.com/docs/guides/function-calling) or use
   * built-in [tools](https://platform.excai.com/docs/guides/tools) like
   * [web search](https://platform.excai.com/docs/guides/tools-web-search) or
   * [file search](https://platform.excai.com/docs/guides/tools-file-search) to use
   * your own data as input for the model's response.
   *
   * @example
   * ```ts
   * const response = await client.responses.create();
   * ```
   */
  create(body: ResponseCreateParams, options?: Core.RequestOptions): Core.APIPromise<ResponseCreateResponse> {
    return this._client.post('/responses', { body, ...options });
  }

  /**
   * Retrieves a model response with the given ID.
   *
   * @example
   * ```ts
   * const response = await client.responses.retrieve(
   *   'resp_677efb5139a88190b512bc3fef8e535d',
   * );
   * ```
   */
  retrieve(
    responseId: string,
    query?: ResponseRetrieveParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<ResponseRetrieveResponse>;
  retrieve(responseId: string, options?: Core.RequestOptions): Core.APIPromise<ResponseRetrieveResponse>;
  retrieve(
    responseId: string,
    query: ResponseRetrieveParams | Core.RequestOptions = {},
    options?: Core.RequestOptions,
  ): Core.APIPromise<ResponseRetrieveResponse> {
    if (isRequestOptions(query)) {
      return this.retrieve(responseId, {}, query);
    }
    return this._client.get(`/responses/${responseId}`, { query, ...options });
  }

  /**
   * Deletes a model response with the given ID.
   *
   * @example
   * ```ts
   * await client.responses.delete(
   *   'resp_677efb5139a88190b512bc3fef8e535d',
   * );
   * ```
   */
  delete(responseId: string, options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.delete(`/responses/${responseId}`, {
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }

  /**
   * Cancels a model response with the given ID. Only responses created with the
   * `background` parameter set to `true` can be cancelled.
   * [Learn more](https://platform.excai.com/docs/guides/background).
   *
   * @example
   * ```ts
   * const response = await client.responses.cancel(
   *   'resp_677efb5139a88190b512bc3fef8e535d',
   * );
   * ```
   */
  cancel(responseId: string, options?: Core.RequestOptions): Core.APIPromise<ResponseCancelResponse> {
    return this._client.post(`/responses/${responseId}/cancel`, options);
  }

  /**
   * Returns a list of input items for a given response.
   *
   * @example
   * ```ts
   * const response = await client.responses.listInputItems(
   *   'response_id',
   * );
   * ```
   */
  listInputItems(
    responseId: string,
    query?: ResponseListInputItemsParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<ResponseListInputItemsResponse>;
  listInputItems(
    responseId: string,
    options?: Core.RequestOptions,
  ): Core.APIPromise<ResponseListInputItemsResponse>;
  listInputItems(
    responseId: string,
    query: ResponseListInputItemsParams | Core.RequestOptions = {},
    options?: Core.RequestOptions,
  ): Core.APIPromise<ResponseListInputItemsResponse> {
    if (isRequestOptions(query)) {
      return this.listInputItems(responseId, {}, query);
    }
    return this._client.get(`/responses/${responseId}/input_items`, { query, ...options });
  }
}

/**
 * The conversation that this response belongs to. Input items and output items
 * from this response are automatically added to this conversation.
 */
export interface Conversation2 {
  /**
   * The unique ID of the conversation.
   */
  id: string;
}

/**
 * A tool call to run a function. See the
 * [function calling guide](https://platform.excai.com/docs/guides/function-calling)
 * for more information.
 */
export interface FunctionToolCall {
  /**
   * A JSON string of the arguments to pass to the function.
   */
  arguments: string;

  /**
   * The unique ID of the function tool call generated by the model.
   */
  call_id: string;

  /**
   * The name of the function to run.
   */
  name: string;

  /**
   * The type of the function tool call. Always `function_call`.
   */
  type: 'function_call';

  /**
   * The unique ID of the function tool call.
   */
  id?: string;

  /**
   * The status of the item. One of `in_progress`, `completed`, or `incomplete`.
   * Populated when items are returned via API.
   */
  status?: 'in_progress' | 'completed' | 'incomplete';
}

/**
 * An output message from the model.
 */
export interface OutputMessage {
  /**
   * The unique ID of the output message.
   */
  id: string;

  /**
   * The content of the output message.
   */
  content: Array<Shared.OutputTextContent | Shared.RefusalContent>;

  /**
   * The role of the output message. Always `assistant`.
   */
  role: 'assistant';

  /**
   * The status of the message input. One of `in_progress`, `completed`, or
   * `incomplete`. Populated when input items are returned via API.
   */
  status: 'in_progress' | 'completed' | 'incomplete';

  /**
   * The type of the output message. Always `message`.
   */
  type: 'message';
}

/**
 * **gpt-5 and o-series models only**
 *
 * Configuration options for
 * [reasoning models](https://platform.excai.com/docs/guides/reasoning).
 */
export interface Reasoning {
  /**
   * Constrains effort on reasoning for
   * [reasoning models](https://platform.excai.com/docs/guides/reasoning). Currently
   * supported values are `minimal`, `low`, `medium`, and `high`. Reducing reasoning
   * effort can result in faster responses and fewer tokens used on reasoning in a
   * response.
   *
   * Note: The `gpt-5-pro` model defaults to (and only supports) `high` reasoning
   * effort.
   */
  effort?: 'minimal' | 'low' | 'medium' | 'high' | null;

  /**
   * @deprecated **Deprecated:** use `summary` instead.
   *
   * A summary of the reasoning performed by the model. This can be useful for
   * debugging and understanding the model's reasoning process. One of `auto`,
   * `concise`, or `detailed`.
   */
  generate_summary?: 'auto' | 'concise' | 'detailed' | null;

  /**
   * A summary of the reasoning performed by the model. This can be useful for
   * debugging and understanding the model's reasoning process. One of `auto`,
   * `concise`, or `detailed`.
   */
  summary?: 'auto' | 'concise' | 'detailed' | null;
}

/**
 * Represents token usage details including input tokens, output tokens, a
 * breakdown of output tokens, and the total tokens used.
 */
export interface ResponseUsage {
  /**
   * The number of input tokens.
   */
  input_tokens: number;

  /**
   * A detailed breakdown of the input tokens.
   */
  input_tokens_details: ResponseUsage.InputTokensDetails;

  /**
   * The number of output tokens.
   */
  output_tokens: number;

  /**
   * A detailed breakdown of the output tokens.
   */
  output_tokens_details: ResponseUsage.OutputTokensDetails;

  /**
   * The total number of tokens used.
   */
  total_tokens: number;
}

export namespace ResponseUsage {
  /**
   * A detailed breakdown of the input tokens.
   */
  export interface InputTokensDetails {
    /**
     * The number of tokens that were retrieved from the cache.
     * [More on prompt caching](https://platform.excai.com/docs/guides/prompt-caching).
     */
    cached_tokens: number;
  }

  /**
   * A detailed breakdown of the output tokens.
   */
  export interface OutputTokensDetails {
    /**
     * The number of reasoning tokens.
     */
    reasoning_tokens: number;
  }
}

/**
 * Constrains the tools available to the model to a pre-defined set.
 */
export interface ToolChoiceAllowed {
  /**
   * Constrains the tools available to the model to a pre-defined set.
   *
   * `auto` allows the model to pick from among the allowed tools and generate a
   * message.
   *
   * `required` requires the model to call one or more of the allowed tools.
   */
  mode: 'auto' | 'required';

  /**
   * A list of tool definitions that the model should be allowed to call.
   *
   * For the Responses API, the list of tool definitions might look like:
   *
   * ```json
   * [
   *   { "type": "function", "name": "get_weather" },
   *   { "type": "mcp", "server_label": "deepwiki" },
   *   { "type": "image_generation" }
   * ]
   * ```
   */
  tools: Array<{ [key: string]: unknown }>;

  /**
   * Allowed tool configuration type. Always `allowed_tools`.
   */
  type: 'allowed_tools';
}

/**
 * Use this option to force the model to call a specific custom tool.
 */
export interface ToolChoiceCustom {
  /**
   * The name of the custom tool to call.
   */
  name: string;

  /**
   * For custom tool calling, the type is always `custom`.
   */
  type: 'custom';
}

/**
 * Indicates that the model should use a built-in tool to generate a response.
 * [Learn more about built-in tools](https://platform.excai.com/docs/guides/tools).
 */
export interface ToolChoiceTypes {
  /**
   * The type of hosted tool the model should to use. Learn more about
   * [built-in tools](https://platform.excai.com/docs/guides/tools).
   *
   * Allowed values are:
   *
   * - `file_search`
   * - `web_search_preview`
   * - `computer_use_preview`
   * - `code_interpreter`
   * - `image_generation`
   */
  type:
    | 'file_search'
    | 'web_search_preview'
    | 'computer_use_preview'
    | 'web_search_preview_2025_03_11'
    | 'image_generation'
    | 'code_interpreter';
}

export interface ResponseCreateResponse {
  /**
   * Unique identifier for this Response.
   */
  id: string;

  /**
   * Unix timestamp (in seconds) of when this Response was created.
   */
  created_at: number;

  /**
   * An error object returned when the model fails to generate a Response.
   */
  error: ResponseCreateResponse.Error | null;

  /**
   * Details about why the response is incomplete.
   */
  incomplete_details: ResponseCreateResponse.IncompleteDetails | null;

  /**
   * A system (or developer) message inserted into the model's context.
   *
   * When using along with `previous_response_id`, the instructions from a previous
   * response will not be carried over to the next response. This makes it simple to
   * swap out system (or developer) messages in new responses.
   */
  instructions:
    | string
    | Array<
        | RunsAPI.EasyInputMessage
        | ResponseCreateResponse.Message
        | OutputMessage
        | Shared.FileSearchToolCall
        | Shared.ComputerToolCall
        | ResponseCreateResponse.ComputerCallOutput
        | Shared.WebSearchToolCall
        | FunctionToolCall
        | ResponseCreateResponse.FunctionCallOutput
        | Shared.ReasoningItem
        | Shared.ImageGenToolCall
        | Shared.CodeInterpreterToolCall
        | Shared.LocalShellToolCall
        | Shared.LocalShellToolCallOutput
        | Shared.McpListTools
        | Shared.McpApprovalRequest
        | ResponseCreateResponse.McpApprovalResponse
        | Shared.McpToolCall
        | ItemsAPI.CustomToolCallOutput
        | Shared.CustomToolCall
        | ResponseCreateResponse.ItemReference
      >
    | null;

  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful
   * for storing additional information about the object in a structured format, and
   * querying for objects via API or the dashboard.
   *
   * Keys are strings with a maximum length of 64 characters. Values are strings with
   * a maximum length of 512 characters.
   */
  metadata: { [key: string]: string } | null;

  /**
   * Model ID used to generate the response, like `gpt-4o` or `o3`. EXCai offers a
   * wide range of models with different capabilities, performance characteristics,
   * and price points. Refer to the
   * [model guide](https://platform.excai.com/docs/models) to browse and compare
   * available models.
   */
  model:
    | 'gpt-5'
    | 'gpt-5-mini'
    | 'gpt-5-nano'
    | 'gpt-5-2025-08-07'
    | 'gpt-5-mini-2025-08-07'
    | 'gpt-5-nano-2025-08-07'
    | 'gpt-5-chat-latest'
    | 'gpt-4.1'
    | 'gpt-4.1-mini'
    | 'gpt-4.1-nano'
    | 'gpt-4.1-2025-04-14'
    | 'gpt-4.1-mini-2025-04-14'
    | 'gpt-4.1-nano-2025-04-14'
    | 'o4-mini'
    | 'o4-mini-2025-04-16'
    | 'o3'
    | 'o3-2025-04-16'
    | 'o3-mini'
    | 'o3-mini-2025-01-31'
    | 'o1'
    | 'o1-2024-12-17'
    | 'o1-preview'
    | 'o1-preview-2024-09-12'
    | 'o1-mini'
    | 'o1-mini-2024-09-12'
    | 'gpt-4o'
    | 'gpt-4o-2024-11-20'
    | 'gpt-4o-2024-08-06'
    | 'gpt-4o-2024-05-13'
    | 'gpt-4o-audio-preview'
    | 'gpt-4o-audio-preview-2024-10-01'
    | 'gpt-4o-audio-preview-2024-12-17'
    | 'gpt-4o-audio-preview-2025-06-03'
    | 'gpt-4o-mini-audio-preview'
    | 'gpt-4o-mini-audio-preview-2024-12-17'
    | 'gpt-4o-search-preview'
    | 'gpt-4o-mini-search-preview'
    | 'gpt-4o-search-preview-2025-03-11'
    | 'gpt-4o-mini-search-preview-2025-03-11'
    | 'chatgpt-4o-latest'
    | 'codex-mini-latest'
    | 'gpt-4o-mini'
    | 'gpt-4o-mini-2024-07-18'
    | 'gpt-4-turbo'
    | 'gpt-4-turbo-2024-04-09'
    | 'gpt-4-0125-preview'
    | 'gpt-4-turbo-preview'
    | 'gpt-4-1106-preview'
    | 'gpt-4-vision-preview'
    | 'gpt-4'
    | 'gpt-4-0314'
    | 'gpt-4-0613'
    | 'gpt-4-32k'
    | 'gpt-4-32k-0314'
    | 'gpt-4-32k-0613'
    | 'gpt-3.5-turbo'
    | 'gpt-3.5-turbo-16k'
    | 'gpt-3.5-turbo-0301'
    | 'gpt-3.5-turbo-0613'
    | 'gpt-3.5-turbo-1106'
    | 'gpt-3.5-turbo-0125'
    | 'gpt-3.5-turbo-16k-0613'
    | 'o1-pro'
    | 'o1-pro-2025-03-19'
    | 'o3-pro'
    | 'o3-pro-2025-06-10'
    | 'o3-deep-research'
    | 'o3-deep-research-2025-06-26'
    | 'o4-mini-deep-research'
    | 'o4-mini-deep-research-2025-06-26'
    | 'computer-use-preview'
    | 'computer-use-preview-2025-03-11'
    | 'gpt-5-codex'
    | 'gpt-5-pro'
    | 'gpt-5-pro-2025-10-06'
    | (string & {});

  /**
   * The object type of this resource - always set to `response`.
   */
  object: 'response';

  /**
   * An array of content items generated by the model.
   *
   * - The length and order of items in the `output` array is dependent on the
   *   model's response.
   * - Rather than accessing the first item in the `output` array and assuming it's
   *   an `assistant` message with the content generated by the model, you might
   *   consider using the `output_text` property where supported in SDKs.
   */
  output: Array<
    | OutputMessage
    | Shared.FileSearchToolCall
    | FunctionToolCall
    | Shared.WebSearchToolCall
    | Shared.ComputerToolCall
    | Shared.ReasoningItem
    | Shared.ImageGenToolCall
    | Shared.CodeInterpreterToolCall
    | Shared.LocalShellToolCall
    | Shared.McpToolCall
    | Shared.McpListTools
    | Shared.McpApprovalRequest
    | Shared.CustomToolCall
  >;

  /**
   * Whether to allow the model to run tool calls in parallel.
   */
  parallel_tool_calls: boolean;

  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will
   * make the output more random, while lower values like 0.2 will make it more
   * focused and deterministic. We generally recommend altering this or `top_p` but
   * not both.
   */
  temperature: number | null;

  /**
   * How the model should select which tool (or tools) to use when generating a
   * response. See the `tools` parameter to see how to specify which tools the model
   * can call.
   */
  tool_choice:
    | 'none'
    | 'auto'
    | 'required'
    | ToolChoiceAllowed
    | ToolChoiceTypes
    | Shared.ToolChoiceFunction
    | Shared.ToolChoiceMcp
    | ToolChoiceCustom;

  /**
   * An array of tools the model may call while generating a response. You can
   * specify which tool to use by setting the `tool_choice` parameter.
   *
   * We support the following categories of tools:
   *
   * - **Built-in tools**: Tools that are provided by EXCai that extend the model's
   *   capabilities, like
   *   [web search](https://platform.excai.com/docs/guides/tools-web-search) or
   *   [file search](https://platform.excai.com/docs/guides/tools-file-search). Learn
   *   more about [built-in tools](https://platform.excai.com/docs/guides/tools).
   * - **MCP Tools**: Integrations with third-party systems via custom MCP servers or
   *   predefined connectors such as Google Drive and SharePoint. Learn more about
   *   [MCP Tools](https://platform.excai.com/docs/guides/tools-connectors-mcp).
   * - **Function calls (custom tools)**: Functions that are defined by you, enabling
   *   the model to call your own code with strongly typed arguments and outputs.
   *   Learn more about
   *   [function calling](https://platform.excai.com/docs/guides/function-calling).
   *   You can also use custom tools to call your own code.
   */
  tools: Array<
    | Shared.FunctionTool
    | Shared.FileSearchTool
    | Shared.ComputerUsePreviewTool
    | Shared.WebSearchTool
    | Shared.McpTool
    | Shared.CodeInterpreterTool
    | Shared.ImageGenTool
    | Shared.LocalShellTool
    | Shared.CustomTool
    | Shared.WebSearchPreviewTool
  >;

  /**
   * An alternative to sampling with temperature, called nucleus sampling, where the
   * model considers the results of the tokens with top_p probability mass. So 0.1
   * means only the tokens comprising the top 10% probability mass are considered.
   *
   * We generally recommend altering this or `temperature` but not both.
   */
  top_p: number | null;

  /**
   * Whether to run the model response in the background.
   * [Learn more](https://platform.excai.com/docs/guides/background).
   */
  background?: boolean | null;

  /**
   * The conversation that this response belongs to. Input items and output items
   * from this response are automatically added to this conversation.
   */
  conversation?: Conversation2 | null;

  /**
   * An upper bound for the number of tokens that can be generated for a response,
   * including visible output tokens and
   * [reasoning tokens](https://platform.excai.com/docs/guides/reasoning).
   */
  max_output_tokens?: number | null;

  /**
   * The maximum number of total calls to built-in tools that can be processed in a
   * response. This maximum number applies across all built-in tool calls, not per
   * individual tool. Any further attempts to call a tool by the model will be
   * ignored.
   */
  max_tool_calls?: number | null;

  /**
   * The unique ID of the previous response to the model. Use this to create
   * multi-turn conversations. Learn more about
   * [conversation state](https://platform.excai.com/docs/guides/conversation-state).
   * Cannot be used in conjunction with `conversation`.
   */
  previous_response_id?: string | null;

  /**
   * Reference to a prompt template and its variables.
   * [Learn more](https://platform.excai.com/docs/guides/text?api-mode=responses#reusable-prompts).
   */
  prompt?: ResponseCreateResponse.Prompt | null;

  /**
   * Used by EXCai to cache responses for similar requests to optimize your cache hit
   * rates. Replaces the `user` field.
   * [Learn more](https://platform.excai.com/docs/guides/prompt-caching).
   */
  prompt_cache_key?: string;

  /**
   * **gpt-5 and o-series models only**
   *
   * Configuration options for
   * [reasoning models](https://platform.excai.com/docs/guides/reasoning).
   */
  reasoning?: Reasoning | null;

  /**
   * A stable identifier used to help detect users of your application that may be
   * violating EXCai's usage policies. The IDs should be a string that uniquely
   * identifies each user. We recommend hashing their username or email address, in
   * order to avoid sending us any identifying information.
   * [Learn more](https://platform.excai.com/docs/guides/safety-best-practices#safety-identifiers).
   */
  safety_identifier?: string;

  /**
   * Specifies the processing type used for serving the request.
   *
   * - If set to 'auto', then the request will be processed with the service tier
   *   configured in the Project settings. Unless otherwise configured, the Project
   *   will use 'default'.
   * - If set to 'default', then the request will be processed with the standard
   *   pricing and performance for the selected model.
   * - If set to '[flex](https://platform.excai.com/docs/guides/flex-processing)' or
   *   '[priority](https://excai.com/api-priority-processing/)', then the request
   *   will be processed with the corresponding service tier.
   * - When not set, the default behavior is 'auto'.
   *
   * When the `service_tier` parameter is set, the response body will include the
   * `service_tier` value based on the processing mode actually used to serve the
   * request. This response value may be different from the value set in the
   * parameter.
   */
  service_tier?: 'auto' | 'default' | 'flex' | 'scale' | 'priority' | null;

  /**
   * The status of the response generation. One of `completed`, `failed`,
   * `in_progress`, `cancelled`, `queued`, or `incomplete`.
   */
  status?: 'completed' | 'failed' | 'in_progress' | 'cancelled' | 'queued' | 'incomplete';

  /**
   * Configuration options for a text response from the model. Can be plain text or
   * structured JSON data. Learn more:
   *
   * - [Text inputs and outputs](https://platform.excai.com/docs/guides/text)
   * - [Structured Outputs](https://platform.excai.com/docs/guides/structured-outputs)
   */
  text?: ResponseCreateResponse.Text;

  /**
   * An integer between 0 and 20 specifying the number of most likely tokens to
   * return at each token position, each with an associated log probability.
   */
  top_logprobs?: number | null;

  /**
   * The truncation strategy to use for the model response.
   *
   * - `auto`: If the input to this Response exceeds the model's context window size,
   *   the model will truncate the response to fit the context window by dropping
   *   items from the beginning of the conversation.
   * - `disabled` (default): If the input size will exceed the context window size
   *   for a model, the request will fail with a 400 error.
   */
  truncation?: 'auto' | 'disabled' | null;

  /**
   * Represents token usage details including input tokens, output tokens, a
   * breakdown of output tokens, and the total tokens used.
   */
  usage?: ResponseUsage;

  /**
   * @deprecated This field is being replaced by `safety_identifier` and
   * `prompt_cache_key`. Use `prompt_cache_key` instead to maintain caching
   * optimizations. A stable identifier for your end-users. Used to boost cache hit
   * rates by better bucketing similar requests and to help EXCai detect and prevent
   * abuse.
   * [Learn more](https://platform.excai.com/docs/guides/safety-best-practices#safety-identifiers).
   */
  user?: string;
}

export namespace ResponseCreateResponse {
  /**
   * An error object returned when the model fails to generate a Response.
   */
  export interface Error {
    /**
     * The error code for the response.
     */
    code:
      | 'server_error'
      | 'rate_limit_exceeded'
      | 'invalid_prompt'
      | 'vector_store_timeout'
      | 'invalid_image'
      | 'invalid_image_format'
      | 'invalid_base64_image'
      | 'invalid_image_url'
      | 'image_too_large'
      | 'image_too_small'
      | 'image_parse_error'
      | 'image_content_policy_violation'
      | 'invalid_image_mode'
      | 'image_file_too_large'
      | 'unsupported_image_media_type'
      | 'empty_image_file'
      | 'failed_to_download_image'
      | 'image_file_not_found';

    /**
     * A human-readable description of the error.
     */
    message: string;
  }

  /**
   * Details about why the response is incomplete.
   */
  export interface IncompleteDetails {
    /**
     * The reason why the response is incomplete.
     */
    reason?: 'max_output_tokens' | 'content_filter';
  }

  /**
   * A message input to the model with a role indicating instruction following
   * hierarchy. Instructions given with the `developer` or `system` role take
   * precedence over instructions given with the `user` role.
   */
  export interface Message {
    /**
     * A list of one or many input items to the model, containing different content
     * types.
     */
    content: Array<
      Shared.InputTextContent | Shared.InputImageContent | Shared.InputFileContent | Shared.InputAudio
    >;

    /**
     * The role of the message input. One of `user`, `system`, or `developer`.
     */
    role: 'user' | 'system' | 'developer';

    /**
     * The status of item. One of `in_progress`, `completed`, or `incomplete`.
     * Populated when items are returned via API.
     */
    status?: 'in_progress' | 'completed' | 'incomplete';

    /**
     * The type of the message input. Always set to `message`.
     */
    type?: 'message';
  }

  /**
   * The output of a computer tool call.
   */
  export interface ComputerCallOutput {
    /**
     * The ID of the computer tool call that produced the output.
     */
    call_id: string;

    /**
     * A computer screenshot image used with the computer use tool.
     */
    output: Shared.ComputerScreenshotImage;

    /**
     * The type of the computer tool call output. Always `computer_call_output`.
     */
    type: 'computer_call_output';

    /**
     * The ID of the computer tool call output.
     */
    id?: string | null;

    /**
     * The safety checks reported by the API that have been acknowledged by the
     * developer.
     */
    acknowledged_safety_checks?: Array<ComputerCallOutput.AcknowledgedSafetyCheck> | null;

    /**
     * The status of the message input. One of `in_progress`, `completed`, or
     * `incomplete`. Populated when input items are returned via API.
     */
    status?: 'in_progress' | 'completed' | 'incomplete' | null;
  }

  export namespace ComputerCallOutput {
    /**
     * A pending safety check for the computer call.
     */
    export interface AcknowledgedSafetyCheck {
      /**
       * The ID of the pending safety check.
       */
      id: string;

      /**
       * The type of the pending safety check.
       */
      code?: string | null;

      /**
       * Details about the pending safety check.
       */
      message?: string | null;
    }
  }

  /**
   * The output of a function tool call.
   */
  export interface FunctionCallOutput {
    /**
     * The unique ID of the function tool call generated by the model.
     */
    call_id: string;

    /**
     * Text, image, or file output of the function tool call.
     */
    output:
      | string
      | Array<FunctionCallOutput.InputText | FunctionCallOutput.InputImage | FunctionCallOutput.InputFile>;

    /**
     * The type of the function tool call output. Always `function_call_output`.
     */
    type: 'function_call_output';

    /**
     * The unique ID of the function tool call output. Populated when this item is
     * returned via API.
     */
    id?: string | null;

    /**
     * The status of the item. One of `in_progress`, `completed`, or `incomplete`.
     * Populated when items are returned via API.
     */
    status?: 'in_progress' | 'completed' | 'incomplete' | null;
  }

  export namespace FunctionCallOutput {
    /**
     * A text input to the model.
     */
    export interface InputText {
      /**
       * The text input to the model.
       */
      text: string;

      /**
       * The type of the input item. Always `input_text`.
       */
      type: 'input_text';
    }

    /**
     * An image input to the model. Learn about
     * [image inputs](https://platform.excai.com/docs/guides/vision)
     */
    export interface InputImage {
      /**
       * The type of the input item. Always `input_image`.
       */
      type: 'input_image';

      /**
       * The detail level of the image to be sent to the model. One of `high`, `low`, or
       * `auto`. Defaults to `auto`.
       */
      detail?: 'low' | 'high' | 'auto' | null;

      /**
       * The ID of the file to be sent to the model.
       */
      file_id?: string | null;

      /**
       * The URL of the image to be sent to the model. A fully qualified URL or base64
       * encoded image in a data URL.
       */
      image_url?: string | null;
    }

    /**
     * A file input to the model.
     */
    export interface InputFile {
      /**
       * The type of the input item. Always `input_file`.
       */
      type: 'input_file';

      /**
       * The base64-encoded data of the file to be sent to the model.
       */
      file_data?: string | null;

      /**
       * The ID of the file to be sent to the model.
       */
      file_id?: string | null;

      /**
       * The URL of the file to be sent to the model.
       */
      file_url?: string | null;

      /**
       * The name of the file to be sent to the model.
       */
      filename?: string | null;
    }
  }

  /**
   * A response to an MCP approval request.
   */
  export interface McpApprovalResponse {
    /**
     * The ID of the approval request being answered.
     */
    approval_request_id: string;

    /**
     * Whether the request was approved.
     */
    approve: boolean;

    /**
     * The type of the item. Always `mcp_approval_response`.
     */
    type: 'mcp_approval_response';

    /**
     * The unique ID of the approval response
     */
    id?: string | null;

    /**
     * Optional reason for the decision.
     */
    reason?: string | null;
  }

  /**
   * An internal identifier for an item to reference.
   */
  export interface ItemReference {
    /**
     * The ID of the item to reference.
     */
    id: string;

    /**
     * The type of item to reference. Always `item_reference`.
     */
    type?: 'item_reference' | null;
  }

  /**
   * Reference to a prompt template and its variables.
   * [Learn more](https://platform.excai.com/docs/guides/text?api-mode=responses#reusable-prompts).
   */
  export interface Prompt {
    /**
     * The unique identifier of the prompt template to use.
     */
    id: string;

    /**
     * Optional map of values to substitute in for variables in your prompt. The
     * substitution values can either be strings, or other Response input types like
     * images or files.
     */
    variables?: {
      [key: string]: string | Shared.InputTextContent | Shared.InputImageContent | Shared.InputFileContent;
    } | null;

    /**
     * Optional version of the prompt template.
     */
    version?: string | null;
  }

  /**
   * Configuration options for a text response from the model. Can be plain text or
   * structured JSON data. Learn more:
   *
   * - [Text inputs and outputs](https://platform.excai.com/docs/guides/text)
   * - [Structured Outputs](https://platform.excai.com/docs/guides/structured-outputs)
   */
  export interface Text {
    /**
     * An object specifying the format that the model must output.
     *
     * Configuring `{ "type": "json_schema" }` enables Structured Outputs, which
     * ensures the model will match your supplied JSON schema. Learn more in the
     * [Structured Outputs guide](https://platform.excai.com/docs/guides/structured-outputs).
     *
     * The default format is `{ "type": "text" }` with no additional options.
     *
     * **Not recommended for gpt-4o and newer models:**
     *
     * Setting to `{ "type": "json_object" }` enables the older JSON mode, which
     * ensures the message the model generates is valid JSON. Using `json_schema` is
     * preferred for models that support it.
     */
    format?:
      | Shared.ResponseFormatText
      | Shared.TextResponseFormatJsonSchema
      | Shared.ResponseFormatJsonObject;

    /**
     * Constrains the verbosity of the model's response. Lower values will result in
     * more concise responses, while higher values will result in more verbose
     * responses. Currently supported values are `low`, `medium`, and `high`.
     */
    verbosity?: 'low' | 'medium' | 'high' | null;
  }
}

export interface ResponseRetrieveResponse {
  /**
   * Unique identifier for this Response.
   */
  id: string;

  /**
   * Unix timestamp (in seconds) of when this Response was created.
   */
  created_at: number;

  /**
   * An error object returned when the model fails to generate a Response.
   */
  error: ResponseRetrieveResponse.Error | null;

  /**
   * Details about why the response is incomplete.
   */
  incomplete_details: ResponseRetrieveResponse.IncompleteDetails | null;

  /**
   * A system (or developer) message inserted into the model's context.
   *
   * When using along with `previous_response_id`, the instructions from a previous
   * response will not be carried over to the next response. This makes it simple to
   * swap out system (or developer) messages in new responses.
   */
  instructions:
    | string
    | Array<
        | RunsAPI.EasyInputMessage
        | ResponseRetrieveResponse.Message
        | OutputMessage
        | Shared.FileSearchToolCall
        | Shared.ComputerToolCall
        | ResponseRetrieveResponse.ComputerCallOutput
        | Shared.WebSearchToolCall
        | FunctionToolCall
        | ResponseRetrieveResponse.FunctionCallOutput
        | Shared.ReasoningItem
        | Shared.ImageGenToolCall
        | Shared.CodeInterpreterToolCall
        | Shared.LocalShellToolCall
        | Shared.LocalShellToolCallOutput
        | Shared.McpListTools
        | Shared.McpApprovalRequest
        | ResponseRetrieveResponse.McpApprovalResponse
        | Shared.McpToolCall
        | ItemsAPI.CustomToolCallOutput
        | Shared.CustomToolCall
        | ResponseRetrieveResponse.ItemReference
      >
    | null;

  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful
   * for storing additional information about the object in a structured format, and
   * querying for objects via API or the dashboard.
   *
   * Keys are strings with a maximum length of 64 characters. Values are strings with
   * a maximum length of 512 characters.
   */
  metadata: { [key: string]: string } | null;

  /**
   * Model ID used to generate the response, like `gpt-4o` or `o3`. EXCai offers a
   * wide range of models with different capabilities, performance characteristics,
   * and price points. Refer to the
   * [model guide](https://platform.excai.com/docs/models) to browse and compare
   * available models.
   */
  model:
    | 'gpt-5'
    | 'gpt-5-mini'
    | 'gpt-5-nano'
    | 'gpt-5-2025-08-07'
    | 'gpt-5-mini-2025-08-07'
    | 'gpt-5-nano-2025-08-07'
    | 'gpt-5-chat-latest'
    | 'gpt-4.1'
    | 'gpt-4.1-mini'
    | 'gpt-4.1-nano'
    | 'gpt-4.1-2025-04-14'
    | 'gpt-4.1-mini-2025-04-14'
    | 'gpt-4.1-nano-2025-04-14'
    | 'o4-mini'
    | 'o4-mini-2025-04-16'
    | 'o3'
    | 'o3-2025-04-16'
    | 'o3-mini'
    | 'o3-mini-2025-01-31'
    | 'o1'
    | 'o1-2024-12-17'
    | 'o1-preview'
    | 'o1-preview-2024-09-12'
    | 'o1-mini'
    | 'o1-mini-2024-09-12'
    | 'gpt-4o'
    | 'gpt-4o-2024-11-20'
    | 'gpt-4o-2024-08-06'
    | 'gpt-4o-2024-05-13'
    | 'gpt-4o-audio-preview'
    | 'gpt-4o-audio-preview-2024-10-01'
    | 'gpt-4o-audio-preview-2024-12-17'
    | 'gpt-4o-audio-preview-2025-06-03'
    | 'gpt-4o-mini-audio-preview'
    | 'gpt-4o-mini-audio-preview-2024-12-17'
    | 'gpt-4o-search-preview'
    | 'gpt-4o-mini-search-preview'
    | 'gpt-4o-search-preview-2025-03-11'
    | 'gpt-4o-mini-search-preview-2025-03-11'
    | 'chatgpt-4o-latest'
    | 'codex-mini-latest'
    | 'gpt-4o-mini'
    | 'gpt-4o-mini-2024-07-18'
    | 'gpt-4-turbo'
    | 'gpt-4-turbo-2024-04-09'
    | 'gpt-4-0125-preview'
    | 'gpt-4-turbo-preview'
    | 'gpt-4-1106-preview'
    | 'gpt-4-vision-preview'
    | 'gpt-4'
    | 'gpt-4-0314'
    | 'gpt-4-0613'
    | 'gpt-4-32k'
    | 'gpt-4-32k-0314'
    | 'gpt-4-32k-0613'
    | 'gpt-3.5-turbo'
    | 'gpt-3.5-turbo-16k'
    | 'gpt-3.5-turbo-0301'
    | 'gpt-3.5-turbo-0613'
    | 'gpt-3.5-turbo-1106'
    | 'gpt-3.5-turbo-0125'
    | 'gpt-3.5-turbo-16k-0613'
    | 'o1-pro'
    | 'o1-pro-2025-03-19'
    | 'o3-pro'
    | 'o3-pro-2025-06-10'
    | 'o3-deep-research'
    | 'o3-deep-research-2025-06-26'
    | 'o4-mini-deep-research'
    | 'o4-mini-deep-research-2025-06-26'
    | 'computer-use-preview'
    | 'computer-use-preview-2025-03-11'
    | 'gpt-5-codex'
    | 'gpt-5-pro'
    | 'gpt-5-pro-2025-10-06'
    | (string & {});

  /**
   * The object type of this resource - always set to `response`.
   */
  object: 'response';

  /**
   * An array of content items generated by the model.
   *
   * - The length and order of items in the `output` array is dependent on the
   *   model's response.
   * - Rather than accessing the first item in the `output` array and assuming it's
   *   an `assistant` message with the content generated by the model, you might
   *   consider using the `output_text` property where supported in SDKs.
   */
  output: Array<
    | OutputMessage
    | Shared.FileSearchToolCall
    | FunctionToolCall
    | Shared.WebSearchToolCall
    | Shared.ComputerToolCall
    | Shared.ReasoningItem
    | Shared.ImageGenToolCall
    | Shared.CodeInterpreterToolCall
    | Shared.LocalShellToolCall
    | Shared.McpToolCall
    | Shared.McpListTools
    | Shared.McpApprovalRequest
    | Shared.CustomToolCall
  >;

  /**
   * Whether to allow the model to run tool calls in parallel.
   */
  parallel_tool_calls: boolean;

  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will
   * make the output more random, while lower values like 0.2 will make it more
   * focused and deterministic. We generally recommend altering this or `top_p` but
   * not both.
   */
  temperature: number | null;

  /**
   * How the model should select which tool (or tools) to use when generating a
   * response. See the `tools` parameter to see how to specify which tools the model
   * can call.
   */
  tool_choice:
    | 'none'
    | 'auto'
    | 'required'
    | ToolChoiceAllowed
    | ToolChoiceTypes
    | Shared.ToolChoiceFunction
    | Shared.ToolChoiceMcp
    | ToolChoiceCustom;

  /**
   * An array of tools the model may call while generating a response. You can
   * specify which tool to use by setting the `tool_choice` parameter.
   *
   * We support the following categories of tools:
   *
   * - **Built-in tools**: Tools that are provided by EXCai that extend the model's
   *   capabilities, like
   *   [web search](https://platform.excai.com/docs/guides/tools-web-search) or
   *   [file search](https://platform.excai.com/docs/guides/tools-file-search). Learn
   *   more about [built-in tools](https://platform.excai.com/docs/guides/tools).
   * - **MCP Tools**: Integrations with third-party systems via custom MCP servers or
   *   predefined connectors such as Google Drive and SharePoint. Learn more about
   *   [MCP Tools](https://platform.excai.com/docs/guides/tools-connectors-mcp).
   * - **Function calls (custom tools)**: Functions that are defined by you, enabling
   *   the model to call your own code with strongly typed arguments and outputs.
   *   Learn more about
   *   [function calling](https://platform.excai.com/docs/guides/function-calling).
   *   You can also use custom tools to call your own code.
   */
  tools: Array<
    | Shared.FunctionTool
    | Shared.FileSearchTool
    | Shared.ComputerUsePreviewTool
    | Shared.WebSearchTool
    | Shared.McpTool
    | Shared.CodeInterpreterTool
    | Shared.ImageGenTool
    | Shared.LocalShellTool
    | Shared.CustomTool
    | Shared.WebSearchPreviewTool
  >;

  /**
   * An alternative to sampling with temperature, called nucleus sampling, where the
   * model considers the results of the tokens with top_p probability mass. So 0.1
   * means only the tokens comprising the top 10% probability mass are considered.
   *
   * We generally recommend altering this or `temperature` but not both.
   */
  top_p: number | null;

  /**
   * Whether to run the model response in the background.
   * [Learn more](https://platform.excai.com/docs/guides/background).
   */
  background?: boolean | null;

  /**
   * The conversation that this response belongs to. Input items and output items
   * from this response are automatically added to this conversation.
   */
  conversation?: Conversation2 | null;

  /**
   * An upper bound for the number of tokens that can be generated for a response,
   * including visible output tokens and
   * [reasoning tokens](https://platform.excai.com/docs/guides/reasoning).
   */
  max_output_tokens?: number | null;

  /**
   * The maximum number of total calls to built-in tools that can be processed in a
   * response. This maximum number applies across all built-in tool calls, not per
   * individual tool. Any further attempts to call a tool by the model will be
   * ignored.
   */
  max_tool_calls?: number | null;

  /**
   * The unique ID of the previous response to the model. Use this to create
   * multi-turn conversations. Learn more about
   * [conversation state](https://platform.excai.com/docs/guides/conversation-state).
   * Cannot be used in conjunction with `conversation`.
   */
  previous_response_id?: string | null;

  /**
   * Reference to a prompt template and its variables.
   * [Learn more](https://platform.excai.com/docs/guides/text?api-mode=responses#reusable-prompts).
   */
  prompt?: ResponseRetrieveResponse.Prompt | null;

  /**
   * Used by EXCai to cache responses for similar requests to optimize your cache hit
   * rates. Replaces the `user` field.
   * [Learn more](https://platform.excai.com/docs/guides/prompt-caching).
   */
  prompt_cache_key?: string;

  /**
   * **gpt-5 and o-series models only**
   *
   * Configuration options for
   * [reasoning models](https://platform.excai.com/docs/guides/reasoning).
   */
  reasoning?: Reasoning | null;

  /**
   * A stable identifier used to help detect users of your application that may be
   * violating EXCai's usage policies. The IDs should be a string that uniquely
   * identifies each user. We recommend hashing their username or email address, in
   * order to avoid sending us any identifying information.
   * [Learn more](https://platform.excai.com/docs/guides/safety-best-practices#safety-identifiers).
   */
  safety_identifier?: string;

  /**
   * Specifies the processing type used for serving the request.
   *
   * - If set to 'auto', then the request will be processed with the service tier
   *   configured in the Project settings. Unless otherwise configured, the Project
   *   will use 'default'.
   * - If set to 'default', then the request will be processed with the standard
   *   pricing and performance for the selected model.
   * - If set to '[flex](https://platform.excai.com/docs/guides/flex-processing)' or
   *   '[priority](https://excai.com/api-priority-processing/)', then the request
   *   will be processed with the corresponding service tier.
   * - When not set, the default behavior is 'auto'.
   *
   * When the `service_tier` parameter is set, the response body will include the
   * `service_tier` value based on the processing mode actually used to serve the
   * request. This response value may be different from the value set in the
   * parameter.
   */
  service_tier?: 'auto' | 'default' | 'flex' | 'scale' | 'priority' | null;

  /**
   * The status of the response generation. One of `completed`, `failed`,
   * `in_progress`, `cancelled`, `queued`, or `incomplete`.
   */
  status?: 'completed' | 'failed' | 'in_progress' | 'cancelled' | 'queued' | 'incomplete';

  /**
   * Configuration options for a text response from the model. Can be plain text or
   * structured JSON data. Learn more:
   *
   * - [Text inputs and outputs](https://platform.excai.com/docs/guides/text)
   * - [Structured Outputs](https://platform.excai.com/docs/guides/structured-outputs)
   */
  text?: ResponseRetrieveResponse.Text;

  /**
   * An integer between 0 and 20 specifying the number of most likely tokens to
   * return at each token position, each with an associated log probability.
   */
  top_logprobs?: number | null;

  /**
   * The truncation strategy to use for the model response.
   *
   * - `auto`: If the input to this Response exceeds the model's context window size,
   *   the model will truncate the response to fit the context window by dropping
   *   items from the beginning of the conversation.
   * - `disabled` (default): If the input size will exceed the context window size
   *   for a model, the request will fail with a 400 error.
   */
  truncation?: 'auto' | 'disabled' | null;

  /**
   * Represents token usage details including input tokens, output tokens, a
   * breakdown of output tokens, and the total tokens used.
   */
  usage?: ResponseUsage;

  /**
   * @deprecated This field is being replaced by `safety_identifier` and
   * `prompt_cache_key`. Use `prompt_cache_key` instead to maintain caching
   * optimizations. A stable identifier for your end-users. Used to boost cache hit
   * rates by better bucketing similar requests and to help EXCai detect and prevent
   * abuse.
   * [Learn more](https://platform.excai.com/docs/guides/safety-best-practices#safety-identifiers).
   */
  user?: string;
}

export namespace ResponseRetrieveResponse {
  /**
   * An error object returned when the model fails to generate a Response.
   */
  export interface Error {
    /**
     * The error code for the response.
     */
    code:
      | 'server_error'
      | 'rate_limit_exceeded'
      | 'invalid_prompt'
      | 'vector_store_timeout'
      | 'invalid_image'
      | 'invalid_image_format'
      | 'invalid_base64_image'
      | 'invalid_image_url'
      | 'image_too_large'
      | 'image_too_small'
      | 'image_parse_error'
      | 'image_content_policy_violation'
      | 'invalid_image_mode'
      | 'image_file_too_large'
      | 'unsupported_image_media_type'
      | 'empty_image_file'
      | 'failed_to_download_image'
      | 'image_file_not_found';

    /**
     * A human-readable description of the error.
     */
    message: string;
  }

  /**
   * Details about why the response is incomplete.
   */
  export interface IncompleteDetails {
    /**
     * The reason why the response is incomplete.
     */
    reason?: 'max_output_tokens' | 'content_filter';
  }

  /**
   * A message input to the model with a role indicating instruction following
   * hierarchy. Instructions given with the `developer` or `system` role take
   * precedence over instructions given with the `user` role.
   */
  export interface Message {
    /**
     * A list of one or many input items to the model, containing different content
     * types.
     */
    content: Array<
      Shared.InputTextContent | Shared.InputImageContent | Shared.InputFileContent | Shared.InputAudio
    >;

    /**
     * The role of the message input. One of `user`, `system`, or `developer`.
     */
    role: 'user' | 'system' | 'developer';

    /**
     * The status of item. One of `in_progress`, `completed`, or `incomplete`.
     * Populated when items are returned via API.
     */
    status?: 'in_progress' | 'completed' | 'incomplete';

    /**
     * The type of the message input. Always set to `message`.
     */
    type?: 'message';
  }

  /**
   * The output of a computer tool call.
   */
  export interface ComputerCallOutput {
    /**
     * The ID of the computer tool call that produced the output.
     */
    call_id: string;

    /**
     * A computer screenshot image used with the computer use tool.
     */
    output: Shared.ComputerScreenshotImage;

    /**
     * The type of the computer tool call output. Always `computer_call_output`.
     */
    type: 'computer_call_output';

    /**
     * The ID of the computer tool call output.
     */
    id?: string | null;

    /**
     * The safety checks reported by the API that have been acknowledged by the
     * developer.
     */
    acknowledged_safety_checks?: Array<ComputerCallOutput.AcknowledgedSafetyCheck> | null;

    /**
     * The status of the message input. One of `in_progress`, `completed`, or
     * `incomplete`. Populated when input items are returned via API.
     */
    status?: 'in_progress' | 'completed' | 'incomplete' | null;
  }

  export namespace ComputerCallOutput {
    /**
     * A pending safety check for the computer call.
     */
    export interface AcknowledgedSafetyCheck {
      /**
       * The ID of the pending safety check.
       */
      id: string;

      /**
       * The type of the pending safety check.
       */
      code?: string | null;

      /**
       * Details about the pending safety check.
       */
      message?: string | null;
    }
  }

  /**
   * The output of a function tool call.
   */
  export interface FunctionCallOutput {
    /**
     * The unique ID of the function tool call generated by the model.
     */
    call_id: string;

    /**
     * Text, image, or file output of the function tool call.
     */
    output:
      | string
      | Array<FunctionCallOutput.InputText | FunctionCallOutput.InputImage | FunctionCallOutput.InputFile>;

    /**
     * The type of the function tool call output. Always `function_call_output`.
     */
    type: 'function_call_output';

    /**
     * The unique ID of the function tool call output. Populated when this item is
     * returned via API.
     */
    id?: string | null;

    /**
     * The status of the item. One of `in_progress`, `completed`, or `incomplete`.
     * Populated when items are returned via API.
     */
    status?: 'in_progress' | 'completed' | 'incomplete' | null;
  }

  export namespace FunctionCallOutput {
    /**
     * A text input to the model.
     */
    export interface InputText {
      /**
       * The text input to the model.
       */
      text: string;

      /**
       * The type of the input item. Always `input_text`.
       */
      type: 'input_text';
    }

    /**
     * An image input to the model. Learn about
     * [image inputs](https://platform.excai.com/docs/guides/vision)
     */
    export interface InputImage {
      /**
       * The type of the input item. Always `input_image`.
       */
      type: 'input_image';

      /**
       * The detail level of the image to be sent to the model. One of `high`, `low`, or
       * `auto`. Defaults to `auto`.
       */
      detail?: 'low' | 'high' | 'auto' | null;

      /**
       * The ID of the file to be sent to the model.
       */
      file_id?: string | null;

      /**
       * The URL of the image to be sent to the model. A fully qualified URL or base64
       * encoded image in a data URL.
       */
      image_url?: string | null;
    }

    /**
     * A file input to the model.
     */
    export interface InputFile {
      /**
       * The type of the input item. Always `input_file`.
       */
      type: 'input_file';

      /**
       * The base64-encoded data of the file to be sent to the model.
       */
      file_data?: string | null;

      /**
       * The ID of the file to be sent to the model.
       */
      file_id?: string | null;

      /**
       * The URL of the file to be sent to the model.
       */
      file_url?: string | null;

      /**
       * The name of the file to be sent to the model.
       */
      filename?: string | null;
    }
  }

  /**
   * A response to an MCP approval request.
   */
  export interface McpApprovalResponse {
    /**
     * The ID of the approval request being answered.
     */
    approval_request_id: string;

    /**
     * Whether the request was approved.
     */
    approve: boolean;

    /**
     * The type of the item. Always `mcp_approval_response`.
     */
    type: 'mcp_approval_response';

    /**
     * The unique ID of the approval response
     */
    id?: string | null;

    /**
     * Optional reason for the decision.
     */
    reason?: string | null;
  }

  /**
   * An internal identifier for an item to reference.
   */
  export interface ItemReference {
    /**
     * The ID of the item to reference.
     */
    id: string;

    /**
     * The type of item to reference. Always `item_reference`.
     */
    type?: 'item_reference' | null;
  }

  /**
   * Reference to a prompt template and its variables.
   * [Learn more](https://platform.excai.com/docs/guides/text?api-mode=responses#reusable-prompts).
   */
  export interface Prompt {
    /**
     * The unique identifier of the prompt template to use.
     */
    id: string;

    /**
     * Optional map of values to substitute in for variables in your prompt. The
     * substitution values can either be strings, or other Response input types like
     * images or files.
     */
    variables?: {
      [key: string]: string | Shared.InputTextContent | Shared.InputImageContent | Shared.InputFileContent;
    } | null;

    /**
     * Optional version of the prompt template.
     */
    version?: string | null;
  }

  /**
   * Configuration options for a text response from the model. Can be plain text or
   * structured JSON data. Learn more:
   *
   * - [Text inputs and outputs](https://platform.excai.com/docs/guides/text)
   * - [Structured Outputs](https://platform.excai.com/docs/guides/structured-outputs)
   */
  export interface Text {
    /**
     * An object specifying the format that the model must output.
     *
     * Configuring `{ "type": "json_schema" }` enables Structured Outputs, which
     * ensures the model will match your supplied JSON schema. Learn more in the
     * [Structured Outputs guide](https://platform.excai.com/docs/guides/structured-outputs).
     *
     * The default format is `{ "type": "text" }` with no additional options.
     *
     * **Not recommended for gpt-4o and newer models:**
     *
     * Setting to `{ "type": "json_object" }` enables the older JSON mode, which
     * ensures the message the model generates is valid JSON. Using `json_schema` is
     * preferred for models that support it.
     */
    format?:
      | Shared.ResponseFormatText
      | Shared.TextResponseFormatJsonSchema
      | Shared.ResponseFormatJsonObject;

    /**
     * Constrains the verbosity of the model's response. Lower values will result in
     * more concise responses, while higher values will result in more verbose
     * responses. Currently supported values are `low`, `medium`, and `high`.
     */
    verbosity?: 'low' | 'medium' | 'high' | null;
  }
}

export interface ResponseCancelResponse {
  /**
   * Unique identifier for this Response.
   */
  id: string;

  /**
   * Unix timestamp (in seconds) of when this Response was created.
   */
  created_at: number;

  /**
   * An error object returned when the model fails to generate a Response.
   */
  error: ResponseCancelResponse.Error | null;

  /**
   * Details about why the response is incomplete.
   */
  incomplete_details: ResponseCancelResponse.IncompleteDetails | null;

  /**
   * A system (or developer) message inserted into the model's context.
   *
   * When using along with `previous_response_id`, the instructions from a previous
   * response will not be carried over to the next response. This makes it simple to
   * swap out system (or developer) messages in new responses.
   */
  instructions:
    | string
    | Array<
        | RunsAPI.EasyInputMessage
        | ResponseCancelResponse.Message
        | OutputMessage
        | Shared.FileSearchToolCall
        | Shared.ComputerToolCall
        | ResponseCancelResponse.ComputerCallOutput
        | Shared.WebSearchToolCall
        | FunctionToolCall
        | ResponseCancelResponse.FunctionCallOutput
        | Shared.ReasoningItem
        | Shared.ImageGenToolCall
        | Shared.CodeInterpreterToolCall
        | Shared.LocalShellToolCall
        | Shared.LocalShellToolCallOutput
        | Shared.McpListTools
        | Shared.McpApprovalRequest
        | ResponseCancelResponse.McpApprovalResponse
        | Shared.McpToolCall
        | ItemsAPI.CustomToolCallOutput
        | Shared.CustomToolCall
        | ResponseCancelResponse.ItemReference
      >
    | null;

  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful
   * for storing additional information about the object in a structured format, and
   * querying for objects via API or the dashboard.
   *
   * Keys are strings with a maximum length of 64 characters. Values are strings with
   * a maximum length of 512 characters.
   */
  metadata: { [key: string]: string } | null;

  /**
   * Model ID used to generate the response, like `gpt-4o` or `o3`. EXCai offers a
   * wide range of models with different capabilities, performance characteristics,
   * and price points. Refer to the
   * [model guide](https://platform.excai.com/docs/models) to browse and compare
   * available models.
   */
  model:
    | 'gpt-5'
    | 'gpt-5-mini'
    | 'gpt-5-nano'
    | 'gpt-5-2025-08-07'
    | 'gpt-5-mini-2025-08-07'
    | 'gpt-5-nano-2025-08-07'
    | 'gpt-5-chat-latest'
    | 'gpt-4.1'
    | 'gpt-4.1-mini'
    | 'gpt-4.1-nano'
    | 'gpt-4.1-2025-04-14'
    | 'gpt-4.1-mini-2025-04-14'
    | 'gpt-4.1-nano-2025-04-14'
    | 'o4-mini'
    | 'o4-mini-2025-04-16'
    | 'o3'
    | 'o3-2025-04-16'
    | 'o3-mini'
    | 'o3-mini-2025-01-31'
    | 'o1'
    | 'o1-2024-12-17'
    | 'o1-preview'
    | 'o1-preview-2024-09-12'
    | 'o1-mini'
    | 'o1-mini-2024-09-12'
    | 'gpt-4o'
    | 'gpt-4o-2024-11-20'
    | 'gpt-4o-2024-08-06'
    | 'gpt-4o-2024-05-13'
    | 'gpt-4o-audio-preview'
    | 'gpt-4o-audio-preview-2024-10-01'
    | 'gpt-4o-audio-preview-2024-12-17'
    | 'gpt-4o-audio-preview-2025-06-03'
    | 'gpt-4o-mini-audio-preview'
    | 'gpt-4o-mini-audio-preview-2024-12-17'
    | 'gpt-4o-search-preview'
    | 'gpt-4o-mini-search-preview'
    | 'gpt-4o-search-preview-2025-03-11'
    | 'gpt-4o-mini-search-preview-2025-03-11'
    | 'chatgpt-4o-latest'
    | 'codex-mini-latest'
    | 'gpt-4o-mini'
    | 'gpt-4o-mini-2024-07-18'
    | 'gpt-4-turbo'
    | 'gpt-4-turbo-2024-04-09'
    | 'gpt-4-0125-preview'
    | 'gpt-4-turbo-preview'
    | 'gpt-4-1106-preview'
    | 'gpt-4-vision-preview'
    | 'gpt-4'
    | 'gpt-4-0314'
    | 'gpt-4-0613'
    | 'gpt-4-32k'
    | 'gpt-4-32k-0314'
    | 'gpt-4-32k-0613'
    | 'gpt-3.5-turbo'
    | 'gpt-3.5-turbo-16k'
    | 'gpt-3.5-turbo-0301'
    | 'gpt-3.5-turbo-0613'
    | 'gpt-3.5-turbo-1106'
    | 'gpt-3.5-turbo-0125'
    | 'gpt-3.5-turbo-16k-0613'
    | 'o1-pro'
    | 'o1-pro-2025-03-19'
    | 'o3-pro'
    | 'o3-pro-2025-06-10'
    | 'o3-deep-research'
    | 'o3-deep-research-2025-06-26'
    | 'o4-mini-deep-research'
    | 'o4-mini-deep-research-2025-06-26'
    | 'computer-use-preview'
    | 'computer-use-preview-2025-03-11'
    | 'gpt-5-codex'
    | 'gpt-5-pro'
    | 'gpt-5-pro-2025-10-06'
    | (string & {});

  /**
   * The object type of this resource - always set to `response`.
   */
  object: 'response';

  /**
   * An array of content items generated by the model.
   *
   * - The length and order of items in the `output` array is dependent on the
   *   model's response.
   * - Rather than accessing the first item in the `output` array and assuming it's
   *   an `assistant` message with the content generated by the model, you might
   *   consider using the `output_text` property where supported in SDKs.
   */
  output: Array<
    | OutputMessage
    | Shared.FileSearchToolCall
    | FunctionToolCall
    | Shared.WebSearchToolCall
    | Shared.ComputerToolCall
    | Shared.ReasoningItem
    | Shared.ImageGenToolCall
    | Shared.CodeInterpreterToolCall
    | Shared.LocalShellToolCall
    | Shared.McpToolCall
    | Shared.McpListTools
    | Shared.McpApprovalRequest
    | Shared.CustomToolCall
  >;

  /**
   * Whether to allow the model to run tool calls in parallel.
   */
  parallel_tool_calls: boolean;

  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will
   * make the output more random, while lower values like 0.2 will make it more
   * focused and deterministic. We generally recommend altering this or `top_p` but
   * not both.
   */
  temperature: number | null;

  /**
   * How the model should select which tool (or tools) to use when generating a
   * response. See the `tools` parameter to see how to specify which tools the model
   * can call.
   */
  tool_choice:
    | 'none'
    | 'auto'
    | 'required'
    | ToolChoiceAllowed
    | ToolChoiceTypes
    | Shared.ToolChoiceFunction
    | Shared.ToolChoiceMcp
    | ToolChoiceCustom;

  /**
   * An array of tools the model may call while generating a response. You can
   * specify which tool to use by setting the `tool_choice` parameter.
   *
   * We support the following categories of tools:
   *
   * - **Built-in tools**: Tools that are provided by EXCai that extend the model's
   *   capabilities, like
   *   [web search](https://platform.excai.com/docs/guides/tools-web-search) or
   *   [file search](https://platform.excai.com/docs/guides/tools-file-search). Learn
   *   more about [built-in tools](https://platform.excai.com/docs/guides/tools).
   * - **MCP Tools**: Integrations with third-party systems via custom MCP servers or
   *   predefined connectors such as Google Drive and SharePoint. Learn more about
   *   [MCP Tools](https://platform.excai.com/docs/guides/tools-connectors-mcp).
   * - **Function calls (custom tools)**: Functions that are defined by you, enabling
   *   the model to call your own code with strongly typed arguments and outputs.
   *   Learn more about
   *   [function calling](https://platform.excai.com/docs/guides/function-calling).
   *   You can also use custom tools to call your own code.
   */
  tools: Array<
    | Shared.FunctionTool
    | Shared.FileSearchTool
    | Shared.ComputerUsePreviewTool
    | Shared.WebSearchTool
    | Shared.McpTool
    | Shared.CodeInterpreterTool
    | Shared.ImageGenTool
    | Shared.LocalShellTool
    | Shared.CustomTool
    | Shared.WebSearchPreviewTool
  >;

  /**
   * An alternative to sampling with temperature, called nucleus sampling, where the
   * model considers the results of the tokens with top_p probability mass. So 0.1
   * means only the tokens comprising the top 10% probability mass are considered.
   *
   * We generally recommend altering this or `temperature` but not both.
   */
  top_p: number | null;

  /**
   * Whether to run the model response in the background.
   * [Learn more](https://platform.excai.com/docs/guides/background).
   */
  background?: boolean | null;

  /**
   * The conversation that this response belongs to. Input items and output items
   * from this response are automatically added to this conversation.
   */
  conversation?: Conversation2 | null;

  /**
   * An upper bound for the number of tokens that can be generated for a response,
   * including visible output tokens and
   * [reasoning tokens](https://platform.excai.com/docs/guides/reasoning).
   */
  max_output_tokens?: number | null;

  /**
   * The maximum number of total calls to built-in tools that can be processed in a
   * response. This maximum number applies across all built-in tool calls, not per
   * individual tool. Any further attempts to call a tool by the model will be
   * ignored.
   */
  max_tool_calls?: number | null;

  /**
   * The unique ID of the previous response to the model. Use this to create
   * multi-turn conversations. Learn more about
   * [conversation state](https://platform.excai.com/docs/guides/conversation-state).
   * Cannot be used in conjunction with `conversation`.
   */
  previous_response_id?: string | null;

  /**
   * Reference to a prompt template and its variables.
   * [Learn more](https://platform.excai.com/docs/guides/text?api-mode=responses#reusable-prompts).
   */
  prompt?: ResponseCancelResponse.Prompt | null;

  /**
   * Used by EXCai to cache responses for similar requests to optimize your cache hit
   * rates. Replaces the `user` field.
   * [Learn more](https://platform.excai.com/docs/guides/prompt-caching).
   */
  prompt_cache_key?: string;

  /**
   * **gpt-5 and o-series models only**
   *
   * Configuration options for
   * [reasoning models](https://platform.excai.com/docs/guides/reasoning).
   */
  reasoning?: Reasoning | null;

  /**
   * A stable identifier used to help detect users of your application that may be
   * violating EXCai's usage policies. The IDs should be a string that uniquely
   * identifies each user. We recommend hashing their username or email address, in
   * order to avoid sending us any identifying information.
   * [Learn more](https://platform.excai.com/docs/guides/safety-best-practices#safety-identifiers).
   */
  safety_identifier?: string;

  /**
   * Specifies the processing type used for serving the request.
   *
   * - If set to 'auto', then the request will be processed with the service tier
   *   configured in the Project settings. Unless otherwise configured, the Project
   *   will use 'default'.
   * - If set to 'default', then the request will be processed with the standard
   *   pricing and performance for the selected model.
   * - If set to '[flex](https://platform.excai.com/docs/guides/flex-processing)' or
   *   '[priority](https://excai.com/api-priority-processing/)', then the request
   *   will be processed with the corresponding service tier.
   * - When not set, the default behavior is 'auto'.
   *
   * When the `service_tier` parameter is set, the response body will include the
   * `service_tier` value based on the processing mode actually used to serve the
   * request. This response value may be different from the value set in the
   * parameter.
   */
  service_tier?: 'auto' | 'default' | 'flex' | 'scale' | 'priority' | null;

  /**
   * The status of the response generation. One of `completed`, `failed`,
   * `in_progress`, `cancelled`, `queued`, or `incomplete`.
   */
  status?: 'completed' | 'failed' | 'in_progress' | 'cancelled' | 'queued' | 'incomplete';

  /**
   * Configuration options for a text response from the model. Can be plain text or
   * structured JSON data. Learn more:
   *
   * - [Text inputs and outputs](https://platform.excai.com/docs/guides/text)
   * - [Structured Outputs](https://platform.excai.com/docs/guides/structured-outputs)
   */
  text?: ResponseCancelResponse.Text;

  /**
   * An integer between 0 and 20 specifying the number of most likely tokens to
   * return at each token position, each with an associated log probability.
   */
  top_logprobs?: number | null;

  /**
   * The truncation strategy to use for the model response.
   *
   * - `auto`: If the input to this Response exceeds the model's context window size,
   *   the model will truncate the response to fit the context window by dropping
   *   items from the beginning of the conversation.
   * - `disabled` (default): If the input size will exceed the context window size
   *   for a model, the request will fail with a 400 error.
   */
  truncation?: 'auto' | 'disabled' | null;

  /**
   * Represents token usage details including input tokens, output tokens, a
   * breakdown of output tokens, and the total tokens used.
   */
  usage?: ResponseUsage;

  /**
   * @deprecated This field is being replaced by `safety_identifier` and
   * `prompt_cache_key`. Use `prompt_cache_key` instead to maintain caching
   * optimizations. A stable identifier for your end-users. Used to boost cache hit
   * rates by better bucketing similar requests and to help EXCai detect and prevent
   * abuse.
   * [Learn more](https://platform.excai.com/docs/guides/safety-best-practices#safety-identifiers).
   */
  user?: string;
}

export namespace ResponseCancelResponse {
  /**
   * An error object returned when the model fails to generate a Response.
   */
  export interface Error {
    /**
     * The error code for the response.
     */
    code:
      | 'server_error'
      | 'rate_limit_exceeded'
      | 'invalid_prompt'
      | 'vector_store_timeout'
      | 'invalid_image'
      | 'invalid_image_format'
      | 'invalid_base64_image'
      | 'invalid_image_url'
      | 'image_too_large'
      | 'image_too_small'
      | 'image_parse_error'
      | 'image_content_policy_violation'
      | 'invalid_image_mode'
      | 'image_file_too_large'
      | 'unsupported_image_media_type'
      | 'empty_image_file'
      | 'failed_to_download_image'
      | 'image_file_not_found';

    /**
     * A human-readable description of the error.
     */
    message: string;
  }

  /**
   * Details about why the response is incomplete.
   */
  export interface IncompleteDetails {
    /**
     * The reason why the response is incomplete.
     */
    reason?: 'max_output_tokens' | 'content_filter';
  }

  /**
   * A message input to the model with a role indicating instruction following
   * hierarchy. Instructions given with the `developer` or `system` role take
   * precedence over instructions given with the `user` role.
   */
  export interface Message {
    /**
     * A list of one or many input items to the model, containing different content
     * types.
     */
    content: Array<
      Shared.InputTextContent | Shared.InputImageContent | Shared.InputFileContent | Shared.InputAudio
    >;

    /**
     * The role of the message input. One of `user`, `system`, or `developer`.
     */
    role: 'user' | 'system' | 'developer';

    /**
     * The status of item. One of `in_progress`, `completed`, or `incomplete`.
     * Populated when items are returned via API.
     */
    status?: 'in_progress' | 'completed' | 'incomplete';

    /**
     * The type of the message input. Always set to `message`.
     */
    type?: 'message';
  }

  /**
   * The output of a computer tool call.
   */
  export interface ComputerCallOutput {
    /**
     * The ID of the computer tool call that produced the output.
     */
    call_id: string;

    /**
     * A computer screenshot image used with the computer use tool.
     */
    output: Shared.ComputerScreenshotImage;

    /**
     * The type of the computer tool call output. Always `computer_call_output`.
     */
    type: 'computer_call_output';

    /**
     * The ID of the computer tool call output.
     */
    id?: string | null;

    /**
     * The safety checks reported by the API that have been acknowledged by the
     * developer.
     */
    acknowledged_safety_checks?: Array<ComputerCallOutput.AcknowledgedSafetyCheck> | null;

    /**
     * The status of the message input. One of `in_progress`, `completed`, or
     * `incomplete`. Populated when input items are returned via API.
     */
    status?: 'in_progress' | 'completed' | 'incomplete' | null;
  }

  export namespace ComputerCallOutput {
    /**
     * A pending safety check for the computer call.
     */
    export interface AcknowledgedSafetyCheck {
      /**
       * The ID of the pending safety check.
       */
      id: string;

      /**
       * The type of the pending safety check.
       */
      code?: string | null;

      /**
       * Details about the pending safety check.
       */
      message?: string | null;
    }
  }

  /**
   * The output of a function tool call.
   */
  export interface FunctionCallOutput {
    /**
     * The unique ID of the function tool call generated by the model.
     */
    call_id: string;

    /**
     * Text, image, or file output of the function tool call.
     */
    output:
      | string
      | Array<FunctionCallOutput.InputText | FunctionCallOutput.InputImage | FunctionCallOutput.InputFile>;

    /**
     * The type of the function tool call output. Always `function_call_output`.
     */
    type: 'function_call_output';

    /**
     * The unique ID of the function tool call output. Populated when this item is
     * returned via API.
     */
    id?: string | null;

    /**
     * The status of the item. One of `in_progress`, `completed`, or `incomplete`.
     * Populated when items are returned via API.
     */
    status?: 'in_progress' | 'completed' | 'incomplete' | null;
  }

  export namespace FunctionCallOutput {
    /**
     * A text input to the model.
     */
    export interface InputText {
      /**
       * The text input to the model.
       */
      text: string;

      /**
       * The type of the input item. Always `input_text`.
       */
      type: 'input_text';
    }

    /**
     * An image input to the model. Learn about
     * [image inputs](https://platform.excai.com/docs/guides/vision)
     */
    export interface InputImage {
      /**
       * The type of the input item. Always `input_image`.
       */
      type: 'input_image';

      /**
       * The detail level of the image to be sent to the model. One of `high`, `low`, or
       * `auto`. Defaults to `auto`.
       */
      detail?: 'low' | 'high' | 'auto' | null;

      /**
       * The ID of the file to be sent to the model.
       */
      file_id?: string | null;

      /**
       * The URL of the image to be sent to the model. A fully qualified URL or base64
       * encoded image in a data URL.
       */
      image_url?: string | null;
    }

    /**
     * A file input to the model.
     */
    export interface InputFile {
      /**
       * The type of the input item. Always `input_file`.
       */
      type: 'input_file';

      /**
       * The base64-encoded data of the file to be sent to the model.
       */
      file_data?: string | null;

      /**
       * The ID of the file to be sent to the model.
       */
      file_id?: string | null;

      /**
       * The URL of the file to be sent to the model.
       */
      file_url?: string | null;

      /**
       * The name of the file to be sent to the model.
       */
      filename?: string | null;
    }
  }

  /**
   * A response to an MCP approval request.
   */
  export interface McpApprovalResponse {
    /**
     * The ID of the approval request being answered.
     */
    approval_request_id: string;

    /**
     * Whether the request was approved.
     */
    approve: boolean;

    /**
     * The type of the item. Always `mcp_approval_response`.
     */
    type: 'mcp_approval_response';

    /**
     * The unique ID of the approval response
     */
    id?: string | null;

    /**
     * Optional reason for the decision.
     */
    reason?: string | null;
  }

  /**
   * An internal identifier for an item to reference.
   */
  export interface ItemReference {
    /**
     * The ID of the item to reference.
     */
    id: string;

    /**
     * The type of item to reference. Always `item_reference`.
     */
    type?: 'item_reference' | null;
  }

  /**
   * Reference to a prompt template and its variables.
   * [Learn more](https://platform.excai.com/docs/guides/text?api-mode=responses#reusable-prompts).
   */
  export interface Prompt {
    /**
     * The unique identifier of the prompt template to use.
     */
    id: string;

    /**
     * Optional map of values to substitute in for variables in your prompt. The
     * substitution values can either be strings, or other Response input types like
     * images or files.
     */
    variables?: {
      [key: string]: string | Shared.InputTextContent | Shared.InputImageContent | Shared.InputFileContent;
    } | null;

    /**
     * Optional version of the prompt template.
     */
    version?: string | null;
  }

  /**
   * Configuration options for a text response from the model. Can be plain text or
   * structured JSON data. Learn more:
   *
   * - [Text inputs and outputs](https://platform.excai.com/docs/guides/text)
   * - [Structured Outputs](https://platform.excai.com/docs/guides/structured-outputs)
   */
  export interface Text {
    /**
     * An object specifying the format that the model must output.
     *
     * Configuring `{ "type": "json_schema" }` enables Structured Outputs, which
     * ensures the model will match your supplied JSON schema. Learn more in the
     * [Structured Outputs guide](https://platform.excai.com/docs/guides/structured-outputs).
     *
     * The default format is `{ "type": "text" }` with no additional options.
     *
     * **Not recommended for gpt-4o and newer models:**
     *
     * Setting to `{ "type": "json_object" }` enables the older JSON mode, which
     * ensures the message the model generates is valid JSON. Using `json_schema` is
     * preferred for models that support it.
     */
    format?:
      | Shared.ResponseFormatText
      | Shared.TextResponseFormatJsonSchema
      | Shared.ResponseFormatJsonObject;

    /**
     * Constrains the verbosity of the model's response. Lower values will result in
     * more concise responses, while higher values will result in more verbose
     * responses. Currently supported values are `low`, `medium`, and `high`.
     */
    verbosity?: 'low' | 'medium' | 'high' | null;
  }
}

/**
 * A list of Response items.
 */
export interface ResponseListInputItemsResponse {
  /**
   * A list of items used to generate this response.
   */
  data: Array<
    | ResponseListInputItemsResponse.Message
    | OutputMessage
    | Shared.FileSearchToolCall
    | Shared.ComputerToolCall
    | Shared.ComputerToolCallOutputResource
    | Shared.WebSearchToolCall
    | Shared.FunctionToolCallResource
    | Shared.FunctionToolCallOutputResource
    | Shared.ImageGenToolCall
    | Shared.CodeInterpreterToolCall
    | Shared.LocalShellToolCall
    | Shared.LocalShellToolCallOutput
    | Shared.McpListTools
    | Shared.McpApprovalRequest
    | Shared.McpApprovalResponseResource
    | Shared.McpToolCall
  >;

  /**
   * The ID of the first item in the list.
   */
  first_id: string;

  /**
   * Whether there are more items available.
   */
  has_more: boolean;

  /**
   * The ID of the last item in the list.
   */
  last_id: string;

  /**
   * The type of object returned, must be `list`.
   */
  object: 'list';
}

export namespace ResponseListInputItemsResponse {
  export interface Message {
    /**
     * The unique ID of the message input.
     */
    id: string;

    /**
     * A list of one or many input items to the model, containing different content
     * types.
     */
    content: Array<
      Shared.InputTextContent | Shared.InputImageContent | Shared.InputFileContent | Shared.InputAudio
    >;

    /**
     * The role of the message input. One of `user`, `system`, or `developer`.
     */
    role: 'user' | 'system' | 'developer';

    /**
     * The status of item. One of `in_progress`, `completed`, or `incomplete`.
     * Populated when items are returned via API.
     */
    status?: 'in_progress' | 'completed' | 'incomplete';

    /**
     * The type of the message input. Always set to `message`.
     */
    type?: 'message';
  }
}

export interface ResponseCreateParams {
  /**
   * Whether to run the model response in the background.
   * [Learn more](https://platform.excai.com/docs/guides/background).
   */
  background?: boolean | null;

  /**
   * The conversation that this response belongs to. Items from this conversation are
   * prepended to `input_items` for this response request. Input items and output
   * items from this response are automatically added to this conversation after this
   * response completes.
   */
  conversation?: string | ResponseCreateParams.ConversationParam | null;

  /**
   * Specify additional output data to include in the model response. Currently
   * supported values are:
   *
   * - `web_search_call.action.sources`: Include the sources of the web search tool
   *   call.
   * - `code_interpreter_call.outputs`: Includes the outputs of python code execution
   *   in code interpreter tool call items.
   * - `computer_call_output.output.image_url`: Include image urls from the computer
   *   call output.
   * - `file_search_call.results`: Include the search results of the file search tool
   *   call.
   * - `message.input_image.image_url`: Include image urls from the input message.
   * - `message.output_text.logprobs`: Include logprobs with assistant messages.
   * - `reasoning.encrypted_content`: Includes an encrypted version of reasoning
   *   tokens in reasoning item outputs. This enables reasoning items to be used in
   *   multi-turn conversations when using the Responses API statelessly (like when
   *   the `store` parameter is set to `false`, or when an organization is enrolled
   *   in the zero data retention program).
   */
  include?: Array<
    | 'code_interpreter_call.outputs'
    | 'computer_call_output.output.image_url'
    | 'file_search_call.results'
    | 'message.input_image.image_url'
    | 'message.output_text.logprobs'
    | 'reasoning.encrypted_content'
  > | null;

  /**
   * Text, image, or file inputs to the model, used to generate a response.
   *
   * Learn more:
   *
   * - [Text inputs and outputs](https://platform.excai.com/docs/guides/text)
   * - [Image inputs](https://platform.excai.com/docs/guides/images)
   * - [File inputs](https://platform.excai.com/docs/guides/pdf-files)
   * - [Conversation state](https://platform.excai.com/docs/guides/conversation-state)
   * - [Function calling](https://platform.excai.com/docs/guides/function-calling)
   */
  input?:
    | string
    | Array<
        | RunsAPI.EasyInputMessage
        | ResponseCreateParams.Message
        | OutputMessage
        | Shared.FileSearchToolCall
        | Shared.ComputerToolCall
        | ResponseCreateParams.ComputerCallOutput
        | Shared.WebSearchToolCall
        | FunctionToolCall
        | ResponseCreateParams.FunctionCallOutput
        | Shared.ReasoningItem
        | Shared.ImageGenToolCall
        | Shared.CodeInterpreterToolCall
        | Shared.LocalShellToolCall
        | Shared.LocalShellToolCallOutput
        | Shared.McpListTools
        | Shared.McpApprovalRequest
        | ResponseCreateParams.McpApprovalResponse
        | Shared.McpToolCall
        | ItemsAPI.CustomToolCallOutput
        | Shared.CustomToolCall
        | ResponseCreateParams.ItemReference
      >;

  /**
   * A system (or developer) message inserted into the model's context.
   *
   * When using along with `previous_response_id`, the instructions from a previous
   * response will not be carried over to the next response. This makes it simple to
   * swap out system (or developer) messages in new responses.
   */
  instructions?: string | null;

  /**
   * An upper bound for the number of tokens that can be generated for a response,
   * including visible output tokens and
   * [reasoning tokens](https://platform.excai.com/docs/guides/reasoning).
   */
  max_output_tokens?: number | null;

  /**
   * The maximum number of total calls to built-in tools that can be processed in a
   * response. This maximum number applies across all built-in tool calls, not per
   * individual tool. Any further attempts to call a tool by the model will be
   * ignored.
   */
  max_tool_calls?: number | null;

  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful
   * for storing additional information about the object in a structured format, and
   * querying for objects via API or the dashboard.
   *
   * Keys are strings with a maximum length of 64 characters. Values are strings with
   * a maximum length of 512 characters.
   */
  metadata?: { [key: string]: string } | null;

  /**
   * Model ID used to generate the response, like `gpt-4o` or `o3`. EXCai offers a
   * wide range of models with different capabilities, performance characteristics,
   * and price points. Refer to the
   * [model guide](https://platform.excai.com/docs/models) to browse and compare
   * available models.
   */
  model?:
    | 'gpt-5'
    | 'gpt-5-mini'
    | 'gpt-5-nano'
    | 'gpt-5-2025-08-07'
    | 'gpt-5-mini-2025-08-07'
    | 'gpt-5-nano-2025-08-07'
    | 'gpt-5-chat-latest'
    | 'gpt-4.1'
    | 'gpt-4.1-mini'
    | 'gpt-4.1-nano'
    | 'gpt-4.1-2025-04-14'
    | 'gpt-4.1-mini-2025-04-14'
    | 'gpt-4.1-nano-2025-04-14'
    | 'o4-mini'
    | 'o4-mini-2025-04-16'
    | 'o3'
    | 'o3-2025-04-16'
    | 'o3-mini'
    | 'o3-mini-2025-01-31'
    | 'o1'
    | 'o1-2024-12-17'
    | 'o1-preview'
    | 'o1-preview-2024-09-12'
    | 'o1-mini'
    | 'o1-mini-2024-09-12'
    | 'gpt-4o'
    | 'gpt-4o-2024-11-20'
    | 'gpt-4o-2024-08-06'
    | 'gpt-4o-2024-05-13'
    | 'gpt-4o-audio-preview'
    | 'gpt-4o-audio-preview-2024-10-01'
    | 'gpt-4o-audio-preview-2024-12-17'
    | 'gpt-4o-audio-preview-2025-06-03'
    | 'gpt-4o-mini-audio-preview'
    | 'gpt-4o-mini-audio-preview-2024-12-17'
    | 'gpt-4o-search-preview'
    | 'gpt-4o-mini-search-preview'
    | 'gpt-4o-search-preview-2025-03-11'
    | 'gpt-4o-mini-search-preview-2025-03-11'
    | 'chatgpt-4o-latest'
    | 'codex-mini-latest'
    | 'gpt-4o-mini'
    | 'gpt-4o-mini-2024-07-18'
    | 'gpt-4-turbo'
    | 'gpt-4-turbo-2024-04-09'
    | 'gpt-4-0125-preview'
    | 'gpt-4-turbo-preview'
    | 'gpt-4-1106-preview'
    | 'gpt-4-vision-preview'
    | 'gpt-4'
    | 'gpt-4-0314'
    | 'gpt-4-0613'
    | 'gpt-4-32k'
    | 'gpt-4-32k-0314'
    | 'gpt-4-32k-0613'
    | 'gpt-3.5-turbo'
    | 'gpt-3.5-turbo-16k'
    | 'gpt-3.5-turbo-0301'
    | 'gpt-3.5-turbo-0613'
    | 'gpt-3.5-turbo-1106'
    | 'gpt-3.5-turbo-0125'
    | 'gpt-3.5-turbo-16k-0613'
    | 'o1-pro'
    | 'o1-pro-2025-03-19'
    | 'o3-pro'
    | 'o3-pro-2025-06-10'
    | 'o3-deep-research'
    | 'o3-deep-research-2025-06-26'
    | 'o4-mini-deep-research'
    | 'o4-mini-deep-research-2025-06-26'
    | 'computer-use-preview'
    | 'computer-use-preview-2025-03-11'
    | 'gpt-5-codex'
    | 'gpt-5-pro'
    | 'gpt-5-pro-2025-10-06'
    | (string & {});

  /**
   * Whether to allow the model to run tool calls in parallel.
   */
  parallel_tool_calls?: boolean | null;

  /**
   * The unique ID of the previous response to the model. Use this to create
   * multi-turn conversations. Learn more about
   * [conversation state](https://platform.excai.com/docs/guides/conversation-state).
   * Cannot be used in conjunction with `conversation`.
   */
  previous_response_id?: string | null;

  /**
   * Reference to a prompt template and its variables.
   * [Learn more](https://platform.excai.com/docs/guides/text?api-mode=responses#reusable-prompts).
   */
  prompt?: ResponseCreateParams.Prompt | null;

  /**
   * Used by EXCai to cache responses for similar requests to optimize your cache hit
   * rates. Replaces the `user` field.
   * [Learn more](https://platform.excai.com/docs/guides/prompt-caching).
   */
  prompt_cache_key?: string;

  /**
   * **gpt-5 and o-series models only**
   *
   * Configuration options for
   * [reasoning models](https://platform.excai.com/docs/guides/reasoning).
   */
  reasoning?: Reasoning | null;

  /**
   * A stable identifier used to help detect users of your application that may be
   * violating EXCai's usage policies. The IDs should be a string that uniquely
   * identifies each user. We recommend hashing their username or email address, in
   * order to avoid sending us any identifying information.
   * [Learn more](https://platform.excai.com/docs/guides/safety-best-practices#safety-identifiers).
   */
  safety_identifier?: string;

  /**
   * Specifies the processing type used for serving the request.
   *
   * - If set to 'auto', then the request will be processed with the service tier
   *   configured in the Project settings. Unless otherwise configured, the Project
   *   will use 'default'.
   * - If set to 'default', then the request will be processed with the standard
   *   pricing and performance for the selected model.
   * - If set to '[flex](https://platform.excai.com/docs/guides/flex-processing)' or
   *   '[priority](https://excai.com/api-priority-processing/)', then the request
   *   will be processed with the corresponding service tier.
   * - When not set, the default behavior is 'auto'.
   *
   * When the `service_tier` parameter is set, the response body will include the
   * `service_tier` value based on the processing mode actually used to serve the
   * request. This response value may be different from the value set in the
   * parameter.
   */
  service_tier?: 'auto' | 'default' | 'flex' | 'scale' | 'priority' | null;

  /**
   * Whether to store the generated model response for later retrieval via API.
   */
  store?: boolean | null;

  /**
   * If set to true, the model response data will be streamed to the client as it is
   * generated using
   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).
   * See the
   * [Streaming section below](https://platform.excai.com/docs/api-reference/responses-streaming)
   * for more information.
   */
  stream?: boolean | null;

  /**
   * Options for streaming responses. Only set this when you set `stream: true`.
   */
  stream_options?: ResponseCreateParams.StreamOptions | null;

  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will
   * make the output more random, while lower values like 0.2 will make it more
   * focused and deterministic. We generally recommend altering this or `top_p` but
   * not both.
   */
  temperature?: number | null;

  /**
   * Configuration options for a text response from the model. Can be plain text or
   * structured JSON data. Learn more:
   *
   * - [Text inputs and outputs](https://platform.excai.com/docs/guides/text)
   * - [Structured Outputs](https://platform.excai.com/docs/guides/structured-outputs)
   */
  text?: ResponseCreateParams.Text;

  /**
   * How the model should select which tool (or tools) to use when generating a
   * response. See the `tools` parameter to see how to specify which tools the model
   * can call.
   */
  tool_choice?:
    | 'none'
    | 'auto'
    | 'required'
    | ToolChoiceAllowed
    | ToolChoiceTypes
    | Shared.ToolChoiceFunction
    | Shared.ToolChoiceMcp
    | ToolChoiceCustom;

  /**
   * An array of tools the model may call while generating a response. You can
   * specify which tool to use by setting the `tool_choice` parameter.
   *
   * We support the following categories of tools:
   *
   * - **Built-in tools**: Tools that are provided by EXCai that extend the model's
   *   capabilities, like
   *   [web search](https://platform.excai.com/docs/guides/tools-web-search) or
   *   [file search](https://platform.excai.com/docs/guides/tools-file-search). Learn
   *   more about [built-in tools](https://platform.excai.com/docs/guides/tools).
   * - **MCP Tools**: Integrations with third-party systems via custom MCP servers or
   *   predefined connectors such as Google Drive and SharePoint. Learn more about
   *   [MCP Tools](https://platform.excai.com/docs/guides/tools-connectors-mcp).
   * - **Function calls (custom tools)**: Functions that are defined by you, enabling
   *   the model to call your own code with strongly typed arguments and outputs.
   *   Learn more about
   *   [function calling](https://platform.excai.com/docs/guides/function-calling).
   *   You can also use custom tools to call your own code.
   */
  tools?: Array<
    | Shared.FunctionTool
    | Shared.FileSearchTool
    | Shared.ComputerUsePreviewTool
    | Shared.WebSearchTool
    | Shared.McpTool
    | Shared.CodeInterpreterTool
    | Shared.ImageGenTool
    | Shared.LocalShellTool
    | Shared.CustomTool
    | Shared.WebSearchPreviewTool
  >;

  /**
   * An integer between 0 and 20 specifying the number of most likely tokens to
   * return at each token position, each with an associated log probability.
   */
  top_logprobs?: number | null;

  /**
   * An alternative to sampling with temperature, called nucleus sampling, where the
   * model considers the results of the tokens with top_p probability mass. So 0.1
   * means only the tokens comprising the top 10% probability mass are considered.
   *
   * We generally recommend altering this or `temperature` but not both.
   */
  top_p?: number | null;

  /**
   * The truncation strategy to use for the model response.
   *
   * - `auto`: If the input to this Response exceeds the model's context window size,
   *   the model will truncate the response to fit the context window by dropping
   *   items from the beginning of the conversation.
   * - `disabled` (default): If the input size will exceed the context window size
   *   for a model, the request will fail with a 400 error.
   */
  truncation?: 'auto' | 'disabled' | null;

  /**
   * @deprecated This field is being replaced by `safety_identifier` and
   * `prompt_cache_key`. Use `prompt_cache_key` instead to maintain caching
   * optimizations. A stable identifier for your end-users. Used to boost cache hit
   * rates by better bucketing similar requests and to help EXCai detect and prevent
   * abuse.
   * [Learn more](https://platform.excai.com/docs/guides/safety-best-practices#safety-identifiers).
   */
  user?: string;
}

export namespace ResponseCreateParams {
  /**
   * The conversation that this response belongs to.
   */
  export interface ConversationParam {
    /**
     * The unique ID of the conversation.
     */
    id: string;
  }

  /**
   * A message input to the model with a role indicating instruction following
   * hierarchy. Instructions given with the `developer` or `system` role take
   * precedence over instructions given with the `user` role.
   */
  export interface Message {
    /**
     * A list of one or many input items to the model, containing different content
     * types.
     */
    content: Array<
      Shared.InputTextContent | Shared.InputImageContent | Shared.InputFileContent | Shared.InputAudio
    >;

    /**
     * The role of the message input. One of `user`, `system`, or `developer`.
     */
    role: 'user' | 'system' | 'developer';

    /**
     * The status of item. One of `in_progress`, `completed`, or `incomplete`.
     * Populated when items are returned via API.
     */
    status?: 'in_progress' | 'completed' | 'incomplete';

    /**
     * The type of the message input. Always set to `message`.
     */
    type?: 'message';
  }

  /**
   * The output of a computer tool call.
   */
  export interface ComputerCallOutput {
    /**
     * The ID of the computer tool call that produced the output.
     */
    call_id: string;

    /**
     * A computer screenshot image used with the computer use tool.
     */
    output: Shared.ComputerScreenshotImage;

    /**
     * The type of the computer tool call output. Always `computer_call_output`.
     */
    type: 'computer_call_output';

    /**
     * The ID of the computer tool call output.
     */
    id?: string | null;

    /**
     * The safety checks reported by the API that have been acknowledged by the
     * developer.
     */
    acknowledged_safety_checks?: Array<ComputerCallOutput.AcknowledgedSafetyCheck> | null;

    /**
     * The status of the message input. One of `in_progress`, `completed`, or
     * `incomplete`. Populated when input items are returned via API.
     */
    status?: 'in_progress' | 'completed' | 'incomplete' | null;
  }

  export namespace ComputerCallOutput {
    /**
     * A pending safety check for the computer call.
     */
    export interface AcknowledgedSafetyCheck {
      /**
       * The ID of the pending safety check.
       */
      id: string;

      /**
       * The type of the pending safety check.
       */
      code?: string | null;

      /**
       * Details about the pending safety check.
       */
      message?: string | null;
    }
  }

  /**
   * The output of a function tool call.
   */
  export interface FunctionCallOutput {
    /**
     * The unique ID of the function tool call generated by the model.
     */
    call_id: string;

    /**
     * Text, image, or file output of the function tool call.
     */
    output:
      | string
      | Array<FunctionCallOutput.InputText | FunctionCallOutput.InputImage | FunctionCallOutput.InputFile>;

    /**
     * The type of the function tool call output. Always `function_call_output`.
     */
    type: 'function_call_output';

    /**
     * The unique ID of the function tool call output. Populated when this item is
     * returned via API.
     */
    id?: string | null;

    /**
     * The status of the item. One of `in_progress`, `completed`, or `incomplete`.
     * Populated when items are returned via API.
     */
    status?: 'in_progress' | 'completed' | 'incomplete' | null;
  }

  export namespace FunctionCallOutput {
    /**
     * A text input to the model.
     */
    export interface InputText {
      /**
       * The text input to the model.
       */
      text: string;

      /**
       * The type of the input item. Always `input_text`.
       */
      type: 'input_text';
    }

    /**
     * An image input to the model. Learn about
     * [image inputs](https://platform.excai.com/docs/guides/vision)
     */
    export interface InputImage {
      /**
       * The type of the input item. Always `input_image`.
       */
      type: 'input_image';

      /**
       * The detail level of the image to be sent to the model. One of `high`, `low`, or
       * `auto`. Defaults to `auto`.
       */
      detail?: 'low' | 'high' | 'auto' | null;

      /**
       * The ID of the file to be sent to the model.
       */
      file_id?: string | null;

      /**
       * The URL of the image to be sent to the model. A fully qualified URL or base64
       * encoded image in a data URL.
       */
      image_url?: string | null;
    }

    /**
     * A file input to the model.
     */
    export interface InputFile {
      /**
       * The type of the input item. Always `input_file`.
       */
      type: 'input_file';

      /**
       * The base64-encoded data of the file to be sent to the model.
       */
      file_data?: string | null;

      /**
       * The ID of the file to be sent to the model.
       */
      file_id?: string | null;

      /**
       * The URL of the file to be sent to the model.
       */
      file_url?: string | null;

      /**
       * The name of the file to be sent to the model.
       */
      filename?: string | null;
    }
  }

  /**
   * A response to an MCP approval request.
   */
  export interface McpApprovalResponse {
    /**
     * The ID of the approval request being answered.
     */
    approval_request_id: string;

    /**
     * Whether the request was approved.
     */
    approve: boolean;

    /**
     * The type of the item. Always `mcp_approval_response`.
     */
    type: 'mcp_approval_response';

    /**
     * The unique ID of the approval response
     */
    id?: string | null;

    /**
     * Optional reason for the decision.
     */
    reason?: string | null;
  }

  /**
   * An internal identifier for an item to reference.
   */
  export interface ItemReference {
    /**
     * The ID of the item to reference.
     */
    id: string;

    /**
     * The type of item to reference. Always `item_reference`.
     */
    type?: 'item_reference' | null;
  }

  /**
   * Reference to a prompt template and its variables.
   * [Learn more](https://platform.excai.com/docs/guides/text?api-mode=responses#reusable-prompts).
   */
  export interface Prompt {
    /**
     * The unique identifier of the prompt template to use.
     */
    id: string;

    /**
     * Optional map of values to substitute in for variables in your prompt. The
     * substitution values can either be strings, or other Response input types like
     * images or files.
     */
    variables?: {
      [key: string]: string | Shared.InputTextContent | Shared.InputImageContent | Shared.InputFileContent;
    } | null;

    /**
     * Optional version of the prompt template.
     */
    version?: string | null;
  }

  /**
   * Options for streaming responses. Only set this when you set `stream: true`.
   */
  export interface StreamOptions {
    /**
     * When true, stream obfuscation will be enabled. Stream obfuscation adds random
     * characters to an `obfuscation` field on streaming delta events to normalize
     * payload sizes as a mitigation to certain side-channel attacks. These obfuscation
     * fields are included by default, but add a small amount of overhead to the data
     * stream. You can set `include_obfuscation` to false to optimize for bandwidth if
     * you trust the network links between your application and the EXCai API.
     */
    include_obfuscation?: boolean;
  }

  /**
   * Configuration options for a text response from the model. Can be plain text or
   * structured JSON data. Learn more:
   *
   * - [Text inputs and outputs](https://platform.excai.com/docs/guides/text)
   * - [Structured Outputs](https://platform.excai.com/docs/guides/structured-outputs)
   */
  export interface Text {
    /**
     * An object specifying the format that the model must output.
     *
     * Configuring `{ "type": "json_schema" }` enables Structured Outputs, which
     * ensures the model will match your supplied JSON schema. Learn more in the
     * [Structured Outputs guide](https://platform.excai.com/docs/guides/structured-outputs).
     *
     * The default format is `{ "type": "text" }` with no additional options.
     *
     * **Not recommended for gpt-4o and newer models:**
     *
     * Setting to `{ "type": "json_object" }` enables the older JSON mode, which
     * ensures the message the model generates is valid JSON. Using `json_schema` is
     * preferred for models that support it.
     */
    format?:
      | Shared.ResponseFormatText
      | Shared.TextResponseFormatJsonSchema
      | Shared.ResponseFormatJsonObject;

    /**
     * Constrains the verbosity of the model's response. Lower values will result in
     * more concise responses, while higher values will result in more verbose
     * responses. Currently supported values are `low`, `medium`, and `high`.
     */
    verbosity?: 'low' | 'medium' | 'high' | null;
  }
}

export interface ResponseRetrieveParams {
  /**
   * Additional fields to include in the response. See the `include` parameter for
   * Response creation above for more information.
   */
  include?: Array<
    | 'code_interpreter_call.outputs'
    | 'computer_call_output.output.image_url'
    | 'file_search_call.results'
    | 'message.input_image.image_url'
    | 'message.output_text.logprobs'
    | 'reasoning.encrypted_content'
  >;

  /**
   * When true, stream obfuscation will be enabled. Stream obfuscation adds random
   * characters to an `obfuscation` field on streaming delta events to normalize
   * payload sizes as a mitigation to certain side-channel attacks. These obfuscation
   * fields are included by default, but add a small amount of overhead to the data
   * stream. You can set `include_obfuscation` to false to optimize for bandwidth if
   * you trust the network links between your application and the EXCai API.
   */
  include_obfuscation?: boolean;

  /**
   * The sequence number of the event after which to start streaming.
   */
  starting_after?: number;

  /**
   * If set to true, the model response data will be streamed to the client as it is
   * generated using
   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).
   * See the
   * [Streaming section below](https://platform.excai.com/docs/api-reference/responses-streaming)
   * for more information.
   */
  stream?: boolean;
}

export interface ResponseListInputItemsParams {
  /**
   * An item ID to list items after, used in pagination.
   */
  after?: string;

  /**
   * Additional fields to include in the response. See the `include` parameter for
   * Response creation above for more information.
   */
  include?: Array<
    | 'code_interpreter_call.outputs'
    | 'computer_call_output.output.image_url'
    | 'file_search_call.results'
    | 'message.input_image.image_url'
    | 'message.output_text.logprobs'
    | 'reasoning.encrypted_content'
  >;

  /**
   * A limit on the number of objects to be returned. Limit can range between 1 and
   * 100, and the default is 20.
   */
  limit?: number;

  /**
   * The order to return the input items in. Default is `desc`.
   *
   * - `asc`: Return the input items in ascending order.
   * - `desc`: Return the input items in descending order.
   */
  order?: 'asc' | 'desc';
}

export declare namespace Responses {
  export {
    type Conversation2 as Conversation2,
    type FunctionToolCall as FunctionToolCall,
    type OutputMessage as OutputMessage,
    type Reasoning as Reasoning,
    type ResponseUsage as ResponseUsage,
    type ToolChoiceAllowed as ToolChoiceAllowed,
    type ToolChoiceCustom as ToolChoiceCustom,
    type ToolChoiceTypes as ToolChoiceTypes,
    type ResponseCreateResponse as ResponseCreateResponse,
    type ResponseRetrieveResponse as ResponseRetrieveResponse,
    type ResponseCancelResponse as ResponseCancelResponse,
    type ResponseListInputItemsResponse as ResponseListInputItemsResponse,
    type ResponseCreateParams as ResponseCreateParams,
    type ResponseRetrieveParams as ResponseRetrieveParams,
    type ResponseListInputItemsParams as ResponseListInputItemsParams,
  };
}
