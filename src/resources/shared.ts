// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import * as Shared from './shared';
import * as ResponsesAPI from './responses';

export interface ApproximateLocation {
  /**
   * The type of location approximation. Always `approximate`.
   */
  type: 'approximate';

  /**
   * Free text input for the city of the user, e.g. `San Francisco`.
   */
  city?: string | null;

  /**
   * The two-letter [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1) of
   * the user, e.g. `US`.
   */
  country?: string | null;

  /**
   * Free text input for the region of the user, e.g. `California`.
   */
  region?: string | null;

  /**
   * The [IANA timezone](https://timeapi.io/documentation/iana-timezones) of the
   * user, e.g. `America/Los_Angeles`.
   */
  timezone?: string | null;
}

export interface AssistantToolsCode {
  /**
   * The type of tool being defined: `code_interpreter`
   */
  type: 'code_interpreter';
}

export interface AssistantToolsFileSearch {
  /**
   * The type of tool being defined: `file_search`
   */
  type: 'file_search';

  /**
   * Overrides for the file search tool.
   */
  file_search?: AssistantToolsFileSearch.FileSearch;
}

export namespace AssistantToolsFileSearch {
  /**
   * Overrides for the file search tool.
   */
  export interface FileSearch {
    /**
     * The maximum number of results the file search tool should output. The default is
     * 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between
     * 1 and 50 inclusive.
     *
     * Note that the file search tool may output fewer than `max_num_results` results.
     * See the
     * [file search tool documentation](https://platform.excai.com/docs/assistants/tools/file-search#customizing-file-search-settings)
     * for more information.
     */
    max_num_results?: number;

    /**
     * The ranking options for the file search. If not specified, the file search tool
     * will use the `auto` ranker and a score_threshold of 0.
     *
     * See the
     * [file search tool documentation](https://platform.excai.com/docs/assistants/tools/file-search#customizing-file-search-settings)
     * for more information.
     */
    ranking_options?: Shared.FileSearchRankingOptions;
  }
}

export interface AssistantToolsFunction {
  function: FunctionObject;

  /**
   * The type of tool being defined: `function`
   */
  type: 'function';
}

/**
 * A click action.
 */
export interface Click {
  /**
   * Indicates which mouse button was pressed during the click. One of `left`,
   * `right`, `wheel`, `back`, or `forward`.
   */
  button: 'left' | 'right' | 'wheel' | 'back' | 'forward';

  /**
   * Specifies the event type. For a click action, this property is always set to
   * `click`.
   */
  type: 'click';

  /**
   * The x-coordinate where the click occurred.
   */
  x: number;

  /**
   * The y-coordinate where the click occurred.
   */
  y: number;
}

/**
 * The image output from the code interpreter.
 */
export interface CodeInterpreterOutputImage {
  /**
   * The type of the output. Always 'image'.
   */
  type: 'image';

  /**
   * The URL of the image output from the code interpreter.
   */
  url: string;
}

/**
 * The logs output from the code interpreter.
 */
export interface CodeInterpreterOutputLogs {
  /**
   * The logs output from the code interpreter.
   */
  logs: string;

  /**
   * The type of the output. Always 'logs'.
   */
  type: 'logs';
}

/**
 * A tool that runs Python code to help generate a response to a prompt.
 */
export interface CodeInterpreterTool {
  /**
   * The code interpreter container. Can be a container ID or an object that
   * specifies uploaded file IDs to make available to your code.
   */
  container: string | CodeInterpreterToolAuto;

  /**
   * The type of the code interpreter tool. Always `code_interpreter`.
   */
  type: 'code_interpreter';
}

/**
 * Configuration for a code interpreter container. Optionally specify the IDs of
 * the files to run the code on.
 */
export interface CodeInterpreterToolAuto {
  /**
   * Always `auto`.
   */
  type: 'auto';

  /**
   * An optional list of uploaded files to make available to your code.
   */
  file_ids?: Array<string>;
}

/**
 * A tool call to run code.
 */
export interface CodeInterpreterToolCall {
  /**
   * The unique ID of the code interpreter tool call.
   */
  id: string;

  /**
   * The code to run, or null if not available.
   */
  code: string | null;

  /**
   * The ID of the container used to run the code.
   */
  container_id: string;

  /**
   * The outputs generated by the code interpreter, such as logs or images. Can be
   * null if no outputs are available.
   */
  outputs: Array<CodeInterpreterOutputLogs | CodeInterpreterOutputImage> | null;

  /**
   * The status of the code interpreter tool call. Valid values are `in_progress`,
   * `completed`, `incomplete`, `interpreting`, and `failed`.
   */
  status: 'in_progress' | 'completed' | 'incomplete' | 'interpreting' | 'failed';

  /**
   * The type of the code interpreter tool call. Always `code_interpreter_call`.
   */
  type: 'code_interpreter_call';
}

/**
 * A filter used to compare a specified attribute key to a given value using a
 * defined comparison operation.
 */
export interface ComparisonFilter {
  /**
   * The key to compare against the value.
   */
  key: string;

  /**
   * Specifies the comparison operator: `eq`, `ne`, `gt`, `gte`, `lt`, `lte`, `in`,
   * `nin`.
   *
   * - `eq`: equals
   * - `ne`: not equal
   * - `gt`: greater than
   * - `gte`: greater than or equal
   * - `lt`: less than
   * - `lte`: less than or equal
   * - `in`: in
   * - `nin`: not in
   */
  type: 'eq' | 'ne' | 'gt' | 'gte' | 'lt' | 'lte';

  /**
   * The value to compare against the attribute key; supports string, number, or
   * boolean types.
   */
  value: string | number | boolean | Array<string | number>;
}

/**
 * Usage statistics for the completion request.
 */
export interface CompletionUsage {
  /**
   * Number of tokens in the generated completion.
   */
  completion_tokens: number;

  /**
   * Number of tokens in the prompt.
   */
  prompt_tokens: number;

  /**
   * Total number of tokens used in the request (prompt + completion).
   */
  total_tokens: number;

  /**
   * Breakdown of tokens used in a completion.
   */
  completion_tokens_details?: CompletionUsage.CompletionTokensDetails;

  /**
   * Breakdown of tokens used in the prompt.
   */
  prompt_tokens_details?: CompletionUsage.PromptTokensDetails;
}

export namespace CompletionUsage {
  /**
   * Breakdown of tokens used in a completion.
   */
  export interface CompletionTokensDetails {
    /**
     * When using Predicted Outputs, the number of tokens in the prediction that
     * appeared in the completion.
     */
    accepted_prediction_tokens?: number;

    /**
     * Audio input tokens generated by the model.
     */
    audio_tokens?: number;

    /**
     * Tokens generated by the model for reasoning.
     */
    reasoning_tokens?: number;

    /**
     * When using Predicted Outputs, the number of tokens in the prediction that did
     * not appear in the completion. However, like reasoning tokens, these tokens are
     * still counted in the total completion tokens for purposes of billing, output,
     * and context window limits.
     */
    rejected_prediction_tokens?: number;
  }

  /**
   * Breakdown of tokens used in the prompt.
   */
  export interface PromptTokensDetails {
    /**
     * Audio input tokens present in the prompt.
     */
    audio_tokens?: number;

    /**
     * Cached tokens present in the prompt.
     */
    cached_tokens?: number;
  }
}

/**
 * Combine multiple filters using `and` or `or`.
 */
export interface CompoundFilter {
  /**
   * Array of filters to combine. Items can be `ComparisonFilter` or
   * `CompoundFilter`.
   */
  filters: Array<ComparisonFilter | unknown>;

  /**
   * Type of operation: `and` or `or`.
   */
  type: 'and' | 'or';
}

/**
 * A computer screenshot image used with the computer use tool.
 */
export interface ComputerScreenshotImage {
  /**
   * Specifies the event type. For a computer screenshot, this property is always set
   * to `computer_screenshot`.
   */
  type: 'computer_screenshot';

  /**
   * The identifier of an uploaded file that contains the screenshot.
   */
  file_id?: string;

  /**
   * The URL of the screenshot image.
   */
  image_url?: string;
}

/**
 * A tool call to a computer use tool. See the
 * [computer use guide](https://platform.excai.com/docs/guides/tools-computer-use)
 * for more information.
 */
export interface ComputerToolCall {
  /**
   * The unique ID of the computer call.
   */
  id: string;

  /**
   * A click action.
   */
  action: Click | DoubleClick | Drag | KeyPress | Move | Screenshot | Scroll | Type | Wait;

  /**
   * An identifier used when responding to the tool call with output.
   */
  call_id: string;

  /**
   * The pending safety checks for the computer call.
   */
  pending_safety_checks: Array<ComputerToolCallSafetyCheck>;

  /**
   * The status of the item. One of `in_progress`, `completed`, or `incomplete`.
   * Populated when items are returned via API.
   */
  status: 'in_progress' | 'completed' | 'incomplete';

  /**
   * The type of the computer call. Always `computer_call`.
   */
  type: 'computer_call';
}

export interface ComputerToolCallOutputResource {
  /**
   * The unique ID of the computer call tool output.
   */
  id: string;

  /**
   * The ID of the computer tool call that produced the output.
   */
  call_id: string;

  /**
   * A computer screenshot image used with the computer use tool.
   */
  output: ComputerScreenshotImage;

  /**
   * The type of the computer tool call output. Always `computer_call_output`.
   */
  type: 'computer_call_output';

  /**
   * The safety checks reported by the API that have been acknowledged by the
   * developer.
   */
  acknowledged_safety_checks?: Array<ComputerToolCallSafetyCheck>;

  /**
   * The status of the message input. One of `in_progress`, `completed`, or
   * `incomplete`. Populated when input items are returned via API.
   */
  status?: 'in_progress' | 'completed' | 'incomplete';
}

/**
 * A pending safety check for the computer call.
 */
export interface ComputerToolCallSafetyCheck {
  /**
   * The ID of the pending safety check.
   */
  id: string;

  /**
   * The type of the pending safety check.
   */
  code: string;

  /**
   * Details about the pending safety check.
   */
  message: string;
}

/**
 * A tool that controls a virtual computer. Learn more about the
 * [computer tool](https://platform.excai.com/docs/guides/tools-computer-use).
 */
export interface ComputerUsePreviewTool {
  /**
   * The height of the computer display.
   */
  display_height: number;

  /**
   * The width of the computer display.
   */
  display_width: number;

  /**
   * The type of computer environment to control.
   */
  environment: 'windows' | 'mac' | 'linux' | 'ubuntu' | 'browser';

  /**
   * The type of the computer use tool. Always `computer_use_preview`.
   */
  type: 'computer_use_preview';
}

/**
 * A citation for a container file used to generate a model response.
 */
export interface ContainerFileCitationBody {
  /**
   * The ID of the container file.
   */
  container_id: string;

  /**
   * The index of the last character of the container file citation in the message.
   */
  end_index: number;

  /**
   * The ID of the file.
   */
  file_id: string;

  /**
   * The filename of the container file cited.
   */
  filename: string;

  /**
   * The index of the first character of the container file citation in the message.
   */
  start_index: number;

  /**
   * The type of the container file citation. Always `container_file_citation`.
   */
  type: 'container_file_citation';
}

/**
 * An x/y coordinate pair, e.g. `{ x: 100, y: 200 }`.
 */
export interface Coordinate {
  /**
   * The x-coordinate.
   */
  x: number;

  /**
   * The y-coordinate.
   */
  y: number;
}

/**
 * A custom tool that processes input using a specified format. Learn more about
 * [custom tools](https://platform.excai.com/docs/guides/function-calling#custom-tools).
 */
export interface CustomTool {
  /**
   * The name of the custom tool, used to identify it in tool calls.
   */
  name: string;

  /**
   * The type of the custom tool. Always `custom`.
   */
  type: 'custom';

  /**
   * Optional description of the custom tool, used to provide more context.
   */
  description?: string;

  /**
   * The input format for the custom tool. Default is unconstrained text.
   */
  format?: CustomTool.Text | CustomTool.Grammar;
}

export namespace CustomTool {
  /**
   * Unconstrained free-form text.
   */
  export interface Text {
    /**
     * Unconstrained text format. Always `text`.
     */
    type: 'text';
  }

  /**
   * A grammar defined by the user.
   */
  export interface Grammar {
    /**
     * The grammar definition.
     */
    definition: string;

    /**
     * The syntax of the grammar definition. One of `lark` or `regex`.
     */
    syntax: 'lark' | 'regex';

    /**
     * Grammar format. Always `grammar`.
     */
    type: 'grammar';
  }
}

/**
 * A call to a custom tool created by the model.
 */
export interface CustomToolCall {
  /**
   * An identifier used to map this custom tool call to a tool call output.
   */
  call_id: string;

  /**
   * The input for the custom tool call generated by the model.
   */
  input: string;

  /**
   * The name of the custom tool being called.
   */
  name: string;

  /**
   * The type of the custom tool call. Always `custom_tool_call`.
   */
  type: 'custom_tool_call';

  /**
   * The unique ID of the custom tool call in the EXCai platform.
   */
  id?: string;
}

/**
 * A double click action.
 */
export interface DoubleClick {
  /**
   * Specifies the event type. For a double click action, this property is always set
   * to `double_click`.
   */
  type: 'double_click';

  /**
   * The x-coordinate where the double click occurred.
   */
  x: number;

  /**
   * The y-coordinate where the double click occurred.
   */
  y: number;
}

/**
 * A drag action.
 */
export interface Drag {
  /**
   * An array of coordinates representing the path of the drag action. Coordinates
   * will appear as an array of objects, eg
   *
   * ```
   * [
   *   { x: 100, y: 200 },
   *   { x: 200, y: 300 }
   * ]
   * ```
   */
  path: Array<Coordinate>;

  /**
   * Specifies the event type. For a drag action, this property is always set to
   * `drag`.
   */
  type: 'drag';
}

/**
 * A message input to the model with a role indicating instruction following
 * hierarchy. Instructions given with the `developer` or `system` role take
 * precedence over instructions given with the `user` role. Messages with the
 * `assistant` role are presumed to have been generated by the model in previous
 * interactions.
 */
export interface EvalItem {
  /**
   * Inputs to the model - can contain template strings.
   */
  content:
    | string
    | InputTextContent
    | EvalItem.OutputText
    | EvalItem.InputImage
    | InputAudio
    | Array<unknown>;

  /**
   * The role of the message input. One of `user`, `assistant`, `system`, or
   * `developer`.
   */
  role: 'user' | 'assistant' | 'system' | 'developer';

  /**
   * The type of the message input. Always `message`.
   */
  type?: 'message';
}

export namespace EvalItem {
  /**
   * A text output from the model.
   */
  export interface OutputText {
    /**
     * The text output from the model.
     */
    text: string;

    /**
     * The type of the output text. Always `output_text`.
     */
    type: 'output_text';
  }

  /**
   * An image input to the model.
   */
  export interface InputImage {
    /**
     * The URL of the image input.
     */
    image_url: string;

    /**
     * The type of the image input. Always `input_image`.
     */
    type: 'input_image';

    /**
     * The detail level of the image to be sent to the model. One of `high`, `low`, or
     * `auto`. Defaults to `auto`.
     */
    detail?: string;
  }
}

/**
 * The `File` object represents a document that has been uploaded to EXCai.
 */
export interface ExCaiFile {
  /**
   * The file identifier, which can be referenced in the API endpoints.
   */
  id: string;

  /**
   * The size of the file, in bytes.
   */
  bytes: number;

  /**
   * The Unix timestamp (in seconds) for when the file was created.
   */
  created_at: number;

  /**
   * The name of the file.
   */
  filename: string;

  /**
   * The object type, which is always `file`.
   */
  object: 'file';

  /**
   * The intended purpose of the file. Supported values are `assistants`,
   * `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results`,
   * `vision`, and `user_data`.
   */
  purpose:
    | 'assistants'
    | 'assistants_output'
    | 'batch'
    | 'batch_output'
    | 'fine-tune'
    | 'fine-tune-results'
    | 'vision'
    | 'user_data';

  /**
   * @deprecated Deprecated. The current status of the file, which can be either
   * `uploaded`, `processed`, or `error`.
   */
  status: 'uploaded' | 'processed' | 'error';

  /**
   * The Unix timestamp (in seconds) for when the file will expire.
   */
  expires_at?: number;

  /**
   * @deprecated Deprecated. For details on why a fine-tuning training file failed
   * validation, see the `error` field on `fine_tuning.job`.
   */
  status_details?: string;
}

/**
 * A citation to a file.
 */
export interface FileCitationBody {
  /**
   * The ID of the file.
   */
  file_id: string;

  /**
   * The filename of the file cited.
   */
  filename: string;

  /**
   * The index of the file in the list of files.
   */
  index: number;

  /**
   * The type of the file citation. Always `file_citation`.
   */
  type: 'file_citation';
}

/**
 * A path to a file.
 */
export interface FilePath {
  /**
   * The ID of the file.
   */
  file_id: string;

  /**
   * The index of the file in the list of files.
   */
  index: number;

  /**
   * The type of the file path. Always `file_path`.
   */
  type: 'file_path';
}

/**
 * The ranking options for the file search. If not specified, the file search tool
 * will use the `auto` ranker and a score_threshold of 0.
 *
 * See the
 * [file search tool documentation](https://platform.excai.com/docs/assistants/tools/file-search#customizing-file-search-settings)
 * for more information.
 */
export interface FileSearchRankingOptions {
  /**
   * The score threshold for the file search. All values must be a floating point
   * number between 0 and 1.
   */
  score_threshold: number;

  /**
   * The ranker to use for the file search. If not specified will use the `auto`
   * ranker.
   */
  ranker?: 'auto' | 'default_2024_08_21';
}

/**
 * A tool that searches for relevant content from uploaded files. Learn more about
 * the
 * [file search tool](https://platform.excai.com/docs/guides/tools-file-search).
 */
export interface FileSearchTool {
  /**
   * The type of the file search tool. Always `file_search`.
   */
  type: 'file_search';

  /**
   * The IDs of the vector stores to search.
   */
  vector_store_ids: Array<string>;

  /**
   * A filter to apply.
   */
  filters?: ComparisonFilter | CompoundFilter | null;

  /**
   * The maximum number of results to return. This number should be between 1 and 50
   * inclusive.
   */
  max_num_results?: number;

  /**
   * Ranking options for search.
   */
  ranking_options?: RankingOptions;
}

/**
 * The results of a file search tool call. See the
 * [file search guide](https://platform.excai.com/docs/guides/tools-file-search)
 * for more information.
 */
export interface FileSearchToolCall {
  /**
   * The unique ID of the file search tool call.
   */
  id: string;

  /**
   * The queries used to search for files.
   */
  queries: Array<string>;

  /**
   * The status of the file search tool call. One of `in_progress`, `searching`,
   * `incomplete` or `failed`,
   */
  status: 'in_progress' | 'searching' | 'completed' | 'incomplete' | 'failed';

  /**
   * The type of the file search tool call. Always `file_search_call`.
   */
  type: 'file_search_call';

  /**
   * The results of the file search tool call.
   */
  results?: Array<FileSearchToolCall.Result> | null;
}

export namespace FileSearchToolCall {
  export interface Result {
    /**
     * Set of 16 key-value pairs that can be attached to an object. This can be useful
     * for storing additional information about the object in a structured format, and
     * querying for objects via API or the dashboard. Keys are strings with a maximum
     * length of 64 characters. Values are strings with a maximum length of 512
     * characters, booleans, or numbers.
     */
    attributes?: { [key: string]: string | number | boolean } | null;

    /**
     * The unique ID of the file.
     */
    file_id?: string;

    /**
     * The name of the file.
     */
    filename?: string;

    /**
     * The relevance score of the file - a value between 0 and 1.
     */
    score?: number;

    /**
     * The text that was retrieved from the file.
     */
    text?: string;
  }
}

export interface FunctionObject {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain
   * underscores and dashes, with a maximum length of 64.
   */
  name: string;

  /**
   * A description of what the function does, used by the model to choose when and
   * how to call the function.
   */
  description?: string;

  /**
   * The parameters the functions accepts, described as a JSON Schema object. See the
   * [guide](https://platform.excai.com/docs/guides/function-calling) for examples,
   * and the
   * [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for
   * documentation about the format.
   *
   * Omitting `parameters` defines a function with an empty parameter list.
   */
  parameters?: { [key: string]: unknown };

  /**
   * Whether to enable strict schema adherence when generating the function call. If
   * set to true, the model will follow the exact schema defined in the `parameters`
   * field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn
   * more about Structured Outputs in the
   * [function calling guide](https://platform.excai.com/docs/guides/function-calling).
   */
  strict?: boolean | null;
}

/**
 * Defines a function in your own code the model can choose to call. Learn more
 * about
 * [function calling](https://platform.excai.com/docs/guides/function-calling).
 */
export interface FunctionTool {
  /**
   * The name of the function to call.
   */
  name: string;

  /**
   * A JSON schema object describing the parameters of the function.
   */
  parameters: { [key: string]: unknown } | null;

  /**
   * Whether to enforce strict parameter validation. Default `true`.
   */
  strict: boolean | null;

  /**
   * The type of the function tool. Always `function`.
   */
  type: 'function';

  /**
   * A description of the function. Used by the model to determine whether or not to
   * call the function.
   */
  description?: string | null;
}

export interface FunctionToolCallOutputResource {
  /**
   * The unique ID of the function call tool output.
   */
  id: string;

  /**
   * The unique ID of the function tool call generated by the model.
   */
  call_id: string;

  /**
   * The output from the function call generated by your code. Can be a string or an
   * list of output content.
   */
  output: string | Array<InputTextContent | InputImageContent | InputFileContent>;

  /**
   * The type of the function tool call output. Always `function_call_output`.
   */
  type: 'function_call_output';

  /**
   * The status of the item. One of `in_progress`, `completed`, or `incomplete`.
   * Populated when items are returned via API.
   */
  status?: 'in_progress' | 'completed' | 'incomplete';
}

/**
 * A tool call to run a function. See the
 * [function calling guide](https://platform.excai.com/docs/guides/function-calling)
 * for more information.
 */
export interface FunctionToolCallResource extends ResponsesAPI.FunctionToolCall {
  /**
   * The unique ID of the function tool call.
   */
  id: string;
}

/**
 * A LabelModelGrader object which uses a model to assign labels to each item in
 * the evaluation.
 */
export interface GraderLabelModel {
  input: Array<EvalItem>;

  /**
   * The labels to assign to each item in the evaluation.
   */
  labels: Array<string>;

  /**
   * The model to use for the evaluation. Must support structured outputs.
   */
  model: string;

  /**
   * The name of the grader.
   */
  name: string;

  /**
   * The labels that indicate a passing result. Must be a subset of labels.
   */
  passing_labels: Array<string>;

  /**
   * The object type, which is always `label_model`.
   */
  type: 'label_model';
}

/**
 * A StringCheckGrader object that performs a string comparison between input and
 * reference using a specified operation.
 */
export interface GraderStringCheck {
  /**
   * The input text. This may include template strings.
   */
  input: string;

  /**
   * The name of the grader.
   */
  name: string;

  /**
   * The string check operation to perform. One of `eq`, `ne`, `like`, or `ilike`.
   */
  operation: 'eq' | 'ne' | 'like' | 'ilike';

  /**
   * The reference text. This may include template strings.
   */
  reference: string;

  /**
   * The object type, which is always `string_check`.
   */
  type: 'string_check';
}

/**
 * A tool that generates images using a model like `gpt-image-1`.
 */
export interface ImageGenTool {
  /**
   * The type of the image generation tool. Always `image_generation`.
   */
  type: 'image_generation';

  /**
   * Background type for the generated image. One of `transparent`, `opaque`, or
   * `auto`. Default: `auto`.
   */
  background?: 'transparent' | 'opaque' | 'auto';

  /**
   * Control how much effort the model will exert to match the style and features,
   * especially facial features, of input images. This parameter is only supported
   * for `gpt-image-1`. Unsupported for `gpt-image-1-mini`. Supports `high` and
   * `low`. Defaults to `low`.
   */
  input_fidelity?: 'high' | 'low' | null;

  /**
   * Optional mask for inpainting. Contains `image_url` (string, optional) and
   * `file_id` (string, optional).
   */
  input_image_mask?: ImageGenTool.InputImageMask;

  /**
   * The image generation model to use. Default: `gpt-image-1`.
   */
  model?: 'gpt-image-1' | 'gpt-image-1-mini';

  /**
   * Moderation level for the generated image. Default: `auto`.
   */
  moderation?: 'auto' | 'low';

  /**
   * Compression level for the output image. Default: 100.
   */
  output_compression?: number;

  /**
   * The output format of the generated image. One of `png`, `webp`, or `jpeg`.
   * Default: `png`.
   */
  output_format?: 'png' | 'webp' | 'jpeg';

  /**
   * Number of partial images to generate in streaming mode, from 0 (default value)
   * to 3.
   */
  partial_images?: number;

  /**
   * The quality of the generated image. One of `low`, `medium`, `high`, or `auto`.
   * Default: `auto`.
   */
  quality?: 'low' | 'medium' | 'high' | 'auto';

  /**
   * The size of the generated image. One of `1024x1024`, `1024x1536`, `1536x1024`,
   * or `auto`. Default: `auto`.
   */
  size?: '1024x1024' | '1024x1536' | '1536x1024' | 'auto';
}

export namespace ImageGenTool {
  /**
   * Optional mask for inpainting. Contains `image_url` (string, optional) and
   * `file_id` (string, optional).
   */
  export interface InputImageMask {
    /**
     * File ID for the mask image.
     */
    file_id?: string;

    /**
     * Base64-encoded mask image.
     */
    image_url?: string;
  }
}

/**
 * An image generation request made by the model.
 */
export interface ImageGenToolCall {
  /**
   * The unique ID of the image generation call.
   */
  id: string;

  /**
   * The generated image encoded in base64.
   */
  result: string | null;

  /**
   * The status of the image generation call.
   */
  status: 'in_progress' | 'completed' | 'generating' | 'failed';

  /**
   * The type of the image generation call. Always `image_generation_call`.
   */
  type: 'image_generation_call';
}

/**
 * An audio input to the model.
 */
export interface InputAudio {
  input_audio: InputAudio.InputAudio;

  /**
   * The type of the input item. Always `input_audio`.
   */
  type: 'input_audio';
}

export namespace InputAudio {
  export interface InputAudio {
    /**
     * Base64-encoded audio data.
     */
    data: string;

    /**
     * The format of the audio data. Currently supported formats are `mp3` and `wav`.
     */
    format: 'mp3' | 'wav';
  }
}

/**
 * A file input to the model.
 */
export interface InputFileContent {
  /**
   * The type of the input item. Always `input_file`.
   */
  type: 'input_file';

  /**
   * The content of the file to be sent to the model.
   */
  file_data?: string;

  /**
   * The ID of the file to be sent to the model.
   */
  file_id?: string | null;

  /**
   * The URL of the file to be sent to the model.
   */
  file_url?: string;

  /**
   * The name of the file to be sent to the model.
   */
  filename?: string;
}

/**
 * An image input to the model. Learn about
 * [image inputs](https://platform.excai.com/docs/guides/vision).
 */
export interface InputImageContent {
  /**
   * The detail level of the image to be sent to the model. One of `high`, `low`, or
   * `auto`. Defaults to `auto`.
   */
  detail: 'low' | 'high' | 'auto';

  /**
   * The type of the input item. Always `input_image`.
   */
  type: 'input_image';

  /**
   * The ID of the file to be sent to the model.
   */
  file_id?: string | null;

  /**
   * The URL of the image to be sent to the model. A fully qualified URL or base64
   * encoded image in a data URL.
   */
  image_url?: string | null;
}

/**
 * A text input to the model.
 */
export interface InputTextContent {
  /**
   * The text input to the model.
   */
  text: string;

  /**
   * The type of the input item. Always `input_text`.
   */
  type: 'input_text';
}

/**
 * A collection of keypresses the model would like to perform.
 */
export interface KeyPress {
  /**
   * The combination of keys the model is requesting to be pressed. This is an array
   * of strings, each representing a key.
   */
  keys: Array<string>;

  /**
   * Specifies the event type. For a keypress action, this property is always set to
   * `keypress`.
   */
  type: 'keypress';
}

/**
 * Execute a shell command on the server.
 */
export interface LocalShellExecAction {
  /**
   * The command to run.
   */
  command: Array<string>;

  /**
   * Environment variables to set for the command.
   */
  env: { [key: string]: string };

  /**
   * The type of the local shell action. Always `exec`.
   */
  type: 'exec';

  /**
   * Optional timeout in milliseconds for the command.
   */
  timeout_ms?: number | null;

  /**
   * Optional user to run the command as.
   */
  user?: string | null;

  /**
   * Optional working directory to run the command in.
   */
  working_directory?: string | null;
}

/**
 * A tool that allows the model to execute shell commands in a local environment.
 */
export interface LocalShellTool {
  /**
   * The type of the local shell tool. Always `local_shell`.
   */
  type: 'local_shell';
}

/**
 * A tool call to run a command on the local shell.
 */
export interface LocalShellToolCall {
  /**
   * The unique ID of the local shell call.
   */
  id: string;

  /**
   * Execute a shell command on the server.
   */
  action: LocalShellExecAction;

  /**
   * The unique ID of the local shell tool call generated by the model.
   */
  call_id: string;

  /**
   * The status of the local shell call.
   */
  status: 'in_progress' | 'completed' | 'incomplete';

  /**
   * The type of the local shell call. Always `local_shell_call`.
   */
  type: 'local_shell_call';
}

/**
 * The output of a local shell tool call.
 */
export interface LocalShellToolCallOutput {
  /**
   * The unique ID of the local shell tool call generated by the model.
   */
  id: string;

  /**
   * A JSON string of the output of the local shell tool call.
   */
  output: string;

  /**
   * The type of the local shell tool call output. Always `local_shell_call_output`.
   */
  type: 'local_shell_call_output';

  /**
   * The status of the item. One of `in_progress`, `completed`, or `incomplete`.
   */
  status?: 'in_progress' | 'completed' | 'incomplete' | null;
}

/**
 * The log probability of a token.
 */
export interface LogProb {
  token: string;

  bytes: Array<number>;

  logprob: number;

  top_logprobs: Array<TopLogProb>;
}

/**
 * A request for human approval of a tool invocation.
 */
export interface McpApprovalRequest {
  /**
   * The unique ID of the approval request.
   */
  id: string;

  /**
   * A JSON string of arguments for the tool.
   */
  arguments: string;

  /**
   * The name of the tool to run.
   */
  name: string;

  /**
   * The label of the MCP server making the request.
   */
  server_label: string;

  /**
   * The type of the item. Always `mcp_approval_request`.
   */
  type: 'mcp_approval_request';
}

/**
 * A response to an MCP approval request.
 */
export interface McpApprovalResponseResource {
  /**
   * The unique ID of the approval response
   */
  id: string;

  /**
   * The ID of the approval request being answered.
   */
  approval_request_id: string;

  /**
   * Whether the request was approved.
   */
  approve: boolean;

  /**
   * The type of the item. Always `mcp_approval_response`.
   */
  type: 'mcp_approval_response';

  /**
   * Optional reason for the decision.
   */
  reason?: string | null;
}

/**
 * A list of tools available on an MCP server.
 */
export interface McpListTools {
  /**
   * The unique ID of the list.
   */
  id: string;

  /**
   * The label of the MCP server.
   */
  server_label: string;

  /**
   * The tools available on the server.
   */
  tools: Array<McpListToolsTool>;

  /**
   * The type of the item. Always `mcp_list_tools`.
   */
  type: 'mcp_list_tools';

  /**
   * Error message if the server could not list tools.
   */
  error?: string | null;
}

/**
 * A tool available on an MCP server.
 */
export interface McpListToolsTool {
  /**
   * The JSON schema describing the tool's input.
   */
  input_schema: unknown;

  /**
   * The name of the tool.
   */
  name: string;

  /**
   * Additional annotations about the tool.
   */
  annotations?: unknown | null;

  /**
   * The description of the tool.
   */
  description?: string | null;
}

/**
 * Give the model access to additional tools via remote Model Context Protocol
 * (MCP) servers.
 * [Learn more about MCP](https://platform.excai.com/docs/guides/tools-remote-mcp).
 */
export interface McpTool {
  /**
   * A label for this MCP server, used to identify it in tool calls.
   */
  server_label: string;

  /**
   * The type of the MCP tool. Always `mcp`.
   */
  type: 'mcp';

  /**
   * List of allowed tool names or a filter object.
   */
  allowed_tools?: Array<string> | McpToolFilter | null;

  /**
   * An OAuth access token that can be used with a remote MCP server, either with a
   * custom MCP server URL or a service connector. Your application must handle the
   * OAuth authorization flow and provide the token here.
   */
  authorization?: string;

  /**
   * Identifier for service connectors, like those available in ChatGPT. One of
   * `server_url` or `connector_id` must be provided. Learn more about service
   * connectors
   * [here](https://platform.excai.com/docs/guides/tools-remote-mcp#connectors).
   *
   * Currently supported `connector_id` values are:
   *
   * - Dropbox: `connector_dropbox`
   * - Gmail: `connector_gmail`
   * - Google Calendar: `connector_googlecalendar`
   * - Google Drive: `connector_googledrive`
   * - Microsoft Teams: `connector_microsoftteams`
   * - Outlook Calendar: `connector_outlookcalendar`
   * - Outlook Email: `connector_outlookemail`
   * - SharePoint: `connector_sharepoint`
   */
  connector_id?:
    | 'connector_dropbox'
    | 'connector_gmail'
    | 'connector_googlecalendar'
    | 'connector_googledrive'
    | 'connector_microsoftteams'
    | 'connector_outlookcalendar'
    | 'connector_outlookemail'
    | 'connector_sharepoint';

  /**
   * Optional HTTP headers to send to the MCP server. Use for authentication or other
   * purposes.
   */
  headers?: { [key: string]: string } | null;

  /**
   * Specify which of the MCP server's tools require approval.
   */
  require_approval?: McpTool.McpToolApprovalFilter | 'always' | 'never' | null;

  /**
   * Optional description of the MCP server, used to provide more context.
   */
  server_description?: string;

  /**
   * The URL for the MCP server. One of `server_url` or `connector_id` must be
   * provided.
   */
  server_url?: string;
}

export namespace McpTool {
  /**
   * Specify which of the MCP server's tools require approval. Can be `always`,
   * `never`, or a filter object associated with tools that require approval.
   */
  export interface McpToolApprovalFilter {
    /**
     * A filter object to specify which tools are allowed.
     */
    always?: Shared.McpToolFilter;

    /**
     * A filter object to specify which tools are allowed.
     */
    never?: Shared.McpToolFilter;
  }
}

/**
 * An invocation of a tool on an MCP server.
 */
export interface McpToolCall {
  /**
   * The unique ID of the tool call.
   */
  id: string;

  /**
   * A JSON string of the arguments passed to the tool.
   */
  arguments: string;

  /**
   * The name of the tool that was run.
   */
  name: string;

  /**
   * The label of the MCP server running the tool.
   */
  server_label: string;

  /**
   * The type of the item. Always `mcp_call`.
   */
  type: 'mcp_call';

  /**
   * Unique identifier for the MCP tool call approval request. Include this value in
   * a subsequent `mcp_approval_response` input to approve or reject the
   * corresponding tool call.
   */
  approval_request_id?: string | null;

  /**
   * The error from the tool call, if any.
   */
  error?: string | null;

  /**
   * The output from the tool call.
   */
  output?: string | null;

  /**
   * The status of the tool call. One of `in_progress`, `completed`, `incomplete`,
   * `calling`, or `failed`.
   */
  status?: 'in_progress' | 'completed' | 'incomplete' | 'calling' | 'failed';
}

/**
 * A filter object to specify which tools are allowed.
 */
export interface McpToolFilter {
  /**
   * Indicates whether or not a tool modifies data or is read-only. If an MCP server
   * is
   * [annotated with `readOnlyHint`](https://modelcontextprotocol.io/specification/2025-06-18/schema#toolannotations-readonlyhint),
   * it will match this filter.
   */
  read_only?: boolean;

  /**
   * List of allowed tool names.
   */
  tool_names?: Array<string>;
}

/**
 * A mouse move action.
 */
export interface Move {
  /**
   * Specifies the event type. For a move action, this property is always set to
   * `move`.
   */
  type: 'move';

  /**
   * The x-coordinate to move to.
   */
  x: number;

  /**
   * The y-coordinate to move to.
   */
  y: number;
}

/**
 * A text output from the model.
 */
export interface OutputTextContent {
  /**
   * The annotations of the text output.
   */
  annotations: Array<FileCitationBody | URLCitationBody | ContainerFileCitationBody | FilePath>;

  /**
   * The text output from the model.
   */
  text: string;

  /**
   * The type of the output text. Always `output_text`.
   */
  type: 'output_text';

  logprobs?: Array<LogProb>;
}

export interface RankingOptions {
  /**
   * The ranker to use for the file search.
   */
  ranker?: 'auto' | 'default-2024-11-15';

  /**
   * The score threshold for the file search, a number between 0 and 1. Numbers
   * closer to 1 will attempt to return only the most relevant results, but may
   * return fewer results.
   */
  score_threshold?: number;
}

/**
 * A description of the chain of thought used by a reasoning model while generating
 * a response. Be sure to include these items in your `input` to the Responses API
 * for subsequent turns of a conversation if you are manually
 * [managing context](https://platform.excai.com/docs/guides/conversation-state).
 */
export interface ReasoningItem {
  /**
   * The unique identifier of the reasoning content.
   */
  id: string;

  /**
   * Reasoning summary content.
   */
  summary: Array<Summary>;

  /**
   * The type of the object. Always `reasoning`.
   */
  type: 'reasoning';

  /**
   * Reasoning text content.
   */
  content?: Array<ReasoningTextContent>;

  /**
   * The encrypted content of the reasoning item - populated when a response is
   * generated with `reasoning.encrypted_content` in the `include` parameter.
   */
  encrypted_content?: string | null;

  /**
   * The status of the item. One of `in_progress`, `completed`, or `incomplete`.
   * Populated when items are returned via API.
   */
  status?: 'in_progress' | 'completed' | 'incomplete';
}

/**
 * Reasoning text from the model.
 */
export interface ReasoningTextContent {
  /**
   * The reasoning text from the model.
   */
  text: string;

  /**
   * The type of the reasoning text. Always `reasoning_text`.
   */
  type: 'reasoning_text';
}

/**
 * A refusal from the model.
 */
export interface RefusalContent {
  /**
   * The refusal explanation from the model.
   */
  refusal: string;

  /**
   * The type of the refusal. Always `refusal`.
   */
  type: 'refusal';
}

/**
 * JSON object response format. An older method of generating JSON responses. Using
 * `json_schema` is recommended for models that support it. Note that the model
 * will not generate JSON without a system or user message instructing it to do so.
 */
export interface ResponseFormatJsonObject {
  /**
   * The type of response format being defined. Always `json_object`.
   */
  type: 'json_object';
}

/**
 * JSON Schema response format. Used to generate structured JSON responses. Learn
 * more about
 * [Structured Outputs](https://platform.excai.com/docs/guides/structured-outputs).
 */
export interface ResponseFormatJsonSchema {
  /**
   * Structured Outputs configuration options, including a JSON Schema.
   */
  json_schema: ResponseFormatJsonSchema.JsonSchema;

  /**
   * The type of response format being defined. Always `json_schema`.
   */
  type: 'json_schema';
}

export namespace ResponseFormatJsonSchema {
  /**
   * Structured Outputs configuration options, including a JSON Schema.
   */
  export interface JsonSchema {
    /**
     * The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores
     * and dashes, with a maximum length of 64.
     */
    name: string;

    /**
     * A description of what the response format is for, used by the model to determine
     * how to respond in the format.
     */
    description?: string;

    /**
     * The schema for the response format, described as a JSON Schema object. Learn how
     * to build JSON schemas [here](https://json-schema.org/).
     */
    schema?: { [key: string]: unknown };

    /**
     * Whether to enable strict schema adherence when generating the output. If set to
     * true, the model will always follow the exact schema defined in the `schema`
     * field. Only a subset of JSON Schema is supported when `strict` is `true`. To
     * learn more, read the
     * [Structured Outputs guide](https://platform.excai.com/docs/guides/structured-outputs).
     */
    strict?: boolean | null;
  }
}

/**
 * Default response format. Used to generate text responses.
 */
export interface ResponseFormatText {
  /**
   * The type of response format being defined. Always `text`.
   */
  type: 'text';
}

/**
 * A screenshot action.
 */
export interface Screenshot {
  /**
   * Specifies the event type. For a screenshot action, this property is always set
   * to `screenshot`.
   */
  type: 'screenshot';
}

/**
 * A scroll action.
 */
export interface Scroll {
  /**
   * The horizontal scroll distance.
   */
  scroll_x: number;

  /**
   * The vertical scroll distance.
   */
  scroll_y: number;

  /**
   * Specifies the event type. For a scroll action, this property is always set to
   * `scroll`.
   */
  type: 'scroll';

  /**
   * The x-coordinate where the scroll occurred.
   */
  x: number;

  /**
   * The y-coordinate where the scroll occurred.
   */
  y: number;
}

/**
 * A summary text from the model.
 */
export interface Summary {
  /**
   * A summary of the reasoning output from the model so far.
   */
  text: string;

  /**
   * The type of the object. Always `summary_text`.
   */
  type: 'summary_text';
}

/**
 * JSON Schema response format. Used to generate structured JSON responses. Learn
 * more about
 * [Structured Outputs](https://platform.excai.com/docs/guides/structured-outputs).
 */
export interface TextResponseFormatJsonSchema {
  /**
   * The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores
   * and dashes, with a maximum length of 64.
   */
  name: string;

  /**
   * The schema for the response format, described as a JSON Schema object. Learn how
   * to build JSON schemas [here](https://json-schema.org/).
   */
  schema: { [key: string]: unknown };

  /**
   * The type of response format being defined. Always `json_schema`.
   */
  type: 'json_schema';

  /**
   * A description of what the response format is for, used by the model to determine
   * how to respond in the format.
   */
  description?: string;

  /**
   * Whether to enable strict schema adherence when generating the output. If set to
   * true, the model will always follow the exact schema defined in the `schema`
   * field. Only a subset of JSON Schema is supported when `strict` is `true`. To
   * learn more, read the
   * [Structured Outputs guide](https://platform.excai.com/docs/guides/structured-outputs).
   */
  strict?: boolean | null;
}

/**
 * Use this option to force the model to call a specific function.
 */
export interface ToolChoiceFunction {
  /**
   * The name of the function to call.
   */
  name: string;

  /**
   * For function calling, the type is always `function`.
   */
  type: 'function';
}

/**
 * Use this option to force the model to call a specific tool on a remote MCP
 * server.
 */
export interface ToolChoiceMcp {
  /**
   * The label of the MCP server to use.
   */
  server_label: string;

  /**
   * For MCP tools, the type is always `mcp`.
   */
  type: 'mcp';

  /**
   * The name of the tool to call on the server.
   */
  name?: string | null;
}

/**
 * The top log probability of a token.
 */
export interface TopLogProb {
  token: string;

  bytes: Array<number>;

  logprob: number;
}

/**
 * An action to type in text.
 */
export interface Type {
  /**
   * The text to type.
   */
  text: string;

  /**
   * Specifies the event type. For a type action, this property is always set to
   * `type`.
   */
  type: 'type';
}

/**
 * A citation for a web resource used to generate a model response.
 */
export interface URLCitationBody {
  /**
   * The index of the last character of the URL citation in the message.
   */
  end_index: number;

  /**
   * The index of the first character of the URL citation in the message.
   */
  start_index: number;

  /**
   * The title of the web resource.
   */
  title: string;

  /**
   * The type of the URL citation. Always `url_citation`.
   */
  type: 'url_citation';

  /**
   * The URL of the web resource.
   */
  url: string;
}

/**
 * A wait action.
 */
export interface Wait {
  /**
   * Specifies the event type. For a wait action, this property is always set to
   * `wait`.
   */
  type: 'wait';
}

/**
 * Action type "find": Searches for a pattern within a loaded page.
 */
export interface WebSearchActionFind {
  /**
   * The pattern or text to search for within the page.
   */
  pattern: string;

  /**
   * The action type.
   */
  type: 'find';

  /**
   * The URL of the page searched for the pattern.
   */
  url: string;
}

/**
 * Action type "open_page" - Opens a specific URL from search results.
 */
export interface WebSearchActionOpenPage {
  /**
   * The action type.
   */
  type: 'open_page';

  /**
   * The URL opened by the model.
   */
  url: string;
}

/**
 * Action type "search" - Performs a web search query.
 */
export interface WebSearchActionSearch {
  /**
   * The search query.
   */
  query: string;

  /**
   * The action type.
   */
  type: 'search';

  /**
   * The sources used in the search.
   */
  sources?: Array<WebSearchActionSearch.Source>;
}

export namespace WebSearchActionSearch {
  /**
   * A source used in the search.
   */
  export interface Source {
    /**
     * The type of source. Always `url`.
     */
    type: 'url';

    /**
     * The URL of the source.
     */
    url: string;
  }
}

/**
 * This tool searches the web for relevant results to use in a response. Learn more
 * about the
 * [web search tool](https://platform.excai.com/docs/guides/tools-web-search).
 */
export interface WebSearchPreviewTool {
  /**
   * The type of the web search tool. One of `web_search_preview` or
   * `web_search_preview_2025_03_11`.
   */
  type: 'web_search_preview' | 'web_search_preview_2025_03_11';

  /**
   * High level guidance for the amount of context window space to use for the
   * search. One of `low`, `medium`, or `high`. `medium` is the default.
   */
  search_context_size?: 'low' | 'medium' | 'high';

  /**
   * The user's location.
   */
  user_location?: ApproximateLocation | null;
}

/**
 * Search the Internet for sources related to the prompt. Learn more about the
 * [web search tool](https://platform.excai.com/docs/guides/tools-web-search).
 */
export interface WebSearchTool {
  /**
   * The type of the web search tool. One of `web_search` or `web_search_2025_08_26`.
   */
  type: 'web_search' | 'web_search_2025_08_26';

  /**
   * Filters for the search.
   */
  filters?: WebSearchTool.Filters | null;

  /**
   * High level guidance for the amount of context window space to use for the
   * search. One of `low`, `medium`, or `high`. `medium` is the default.
   */
  search_context_size?: 'low' | 'medium' | 'high';

  /**
   * The approximate location of the user.
   */
  user_location?: WebSearchTool.UserLocation | null;
}

export namespace WebSearchTool {
  /**
   * Filters for the search.
   */
  export interface Filters {
    /**
     * Allowed domains for the search. If not provided, all domains are allowed.
     * Subdomains of the provided domains are allowed as well.
     *
     * Example: `["pubmed.ncbi.nlm.nih.gov"]`
     */
    allowed_domains?: Array<string> | null;
  }

  /**
   * The approximate location of the user.
   */
  export interface UserLocation {
    /**
     * Free text input for the city of the user, e.g. `San Francisco`.
     */
    city?: string | null;

    /**
     * The two-letter [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1) of
     * the user, e.g. `US`.
     */
    country?: string | null;

    /**
     * Free text input for the region of the user, e.g. `California`.
     */
    region?: string | null;

    /**
     * The [IANA timezone](https://timeapi.io/documentation/iana-timezones) of the
     * user, e.g. `America/Los_Angeles`.
     */
    timezone?: string | null;

    /**
     * The type of location approximation. Always `approximate`.
     */
    type?: 'approximate';
  }
}

/**
 * The results of a web search tool call. See the
 * [web search guide](https://platform.excai.com/docs/guides/tools-web-search) for
 * more information.
 */
export interface WebSearchToolCall {
  /**
   * The unique ID of the web search tool call.
   */
  id: string;

  /**
   * An object describing the specific action taken in this web search call. Includes
   * details on how the model used the web (search, open_page, find).
   */
  action: WebSearchActionSearch | WebSearchActionOpenPage | WebSearchActionFind;

  /**
   * The status of the web search tool call.
   */
  status: 'in_progress' | 'searching' | 'completed' | 'failed';

  /**
   * The type of the web search tool call. Always `web_search_call`.
   */
  type: 'web_search_call';
}
