// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../resource';
import { isRequestOptions } from '../../core';
import * as Core from '../../core';
import * as ResponsesAPI from '../responses';
import * as Shared from '../shared';
import * as RunsAPI from '../evals/runs/runs';

export class Items extends APIResource {
  /**
   * Create items in a conversation with the given ID.
   */
  create(
    conversationId: string,
    body: ItemCreateParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<ItemCreateResponse> {
    return this._client.post(`/conversations/${conversationId}/items`, { body, ...options });
  }

  /**
   * Get a single item from a conversation with the given IDs.
   */
  retrieve(
    conversationId: string,
    itemId: string,
    options?: Core.RequestOptions,
  ): Core.APIPromise<ItemRetrieveResponse> {
    return this._client.get(`/conversations/${conversationId}/items/${itemId}`, options);
  }

  /**
   * List all items for a conversation with the given ID.
   */
  list(
    conversationId: string,
    query?: ItemListParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<ItemListResponse>;
  list(conversationId: string, options?: Core.RequestOptions): Core.APIPromise<ItemListResponse>;
  list(
    conversationId: string,
    query: ItemListParams | Core.RequestOptions = {},
    options?: Core.RequestOptions,
  ): Core.APIPromise<ItemListResponse> {
    if (isRequestOptions(query)) {
      return this.list(conversationId, {}, query);
    }
    return this._client.get(`/conversations/${conversationId}/items`, { query, ...options });
  }

  /**
   * Delete an item from a conversation with the given IDs.
   */
  delete(
    conversationId: string,
    itemId: string,
    options?: Core.RequestOptions,
  ): Core.APIPromise<ItemDeleteResponse> {
    return this._client.delete(`/conversations/${conversationId}/items/${itemId}`, options);
  }
}

/**
 * A screenshot of a computer.
 */
export interface ComputerScreenshotContent {
  /**
   * The identifier of an uploaded file that contains the screenshot.
   */
  file_id: string | null;

  /**
   * The URL of the screenshot image.
   */
  image_url: string | null;

  /**
   * Specifies the event type. For a computer screenshot, this property is always set
   * to `computer_screenshot`.
   */
  type: 'computer_screenshot';
}

/**
 * The output of a custom tool call from your code, being sent back to the model.
 */
export interface CustomToolCallOutput {
  /**
   * The call ID, used to map this custom tool call output to a custom tool call.
   */
  call_id: string;

  /**
   * The output from the custom tool call generated by your code. Can be a string or
   * an list of output content.
   */
  output: string | Array<Shared.InputTextContent | Shared.InputImageContent | Shared.InputFileContent>;

  /**
   * The type of the custom tool call output. Always `custom_tool_call_output`.
   */
  type: 'custom_tool_call_output';

  /**
   * The unique ID of the custom tool call output in the EXCai platform.
   */
  id?: string;
}

/**
 * A message to or from the model.
 */
export interface Message {
  /**
   * The unique ID of the message.
   */
  id: string;

  /**
   * The content of the message
   */
  content: Array<
    | Shared.InputTextContent
    | Shared.OutputTextContent
    | TextContent
    | SummaryTextContent
    | Shared.ReasoningTextContent
    | Shared.RefusalContent
    | Shared.InputImageContent
    | ComputerScreenshotContent
    | Shared.InputFileContent
  >;

  /**
   * The role of the message. One of `unknown`, `user`, `assistant`, `system`,
   * `critic`, `discriminator`, `developer`, or `tool`.
   */
  role: 'unknown' | 'user' | 'assistant' | 'system' | 'critic' | 'discriminator' | 'developer' | 'tool';

  /**
   * The status of item. One of `in_progress`, `completed`, or `incomplete`.
   * Populated when items are returned via API.
   */
  status: 'in_progress' | 'completed' | 'incomplete';

  /**
   * The type of the message. Always set to `message`.
   */
  type: 'message';
}

/**
 * A summary text from the model.
 */
export interface SummaryTextContent {
  /**
   * A summary of the reasoning output from the model so far.
   */
  text: string;

  /**
   * The type of the object. Always `summary_text`.
   */
  type: 'summary_text';
}

/**
 * A text content.
 */
export interface TextContent {
  text: string;

  type: 'text';
}

/**
 * A list of Conversation items.
 */
export interface ItemCreateResponse {
  /**
   * A list of conversation items.
   */
  data: Array<
    | Message
    | Shared.FunctionToolCallResource
    | Shared.FunctionToolCallOutputResource
    | Shared.FileSearchToolCall
    | Shared.WebSearchToolCall
    | Shared.ImageGenToolCall
    | Shared.ComputerToolCall
    | Shared.ComputerToolCallOutputResource
    | Shared.ReasoningItem
    | Shared.CodeInterpreterToolCall
    | Shared.LocalShellToolCall
    | Shared.LocalShellToolCallOutput
    | Shared.McpListTools
    | Shared.McpApprovalRequest
    | Shared.McpApprovalResponseResource
    | Shared.McpToolCall
    | Shared.CustomToolCall
    | CustomToolCallOutput
  >;

  /**
   * The ID of the first item in the list.
   */
  first_id: string;

  /**
   * Whether there are more items available.
   */
  has_more: boolean;

  /**
   * The ID of the last item in the list.
   */
  last_id: string;

  /**
   * The type of object returned, must be `list`.
   */
  object: 'list';
}

/**
 * A single item within a conversation. The set of possible types are the same as
 * the `output` type of a
 * [Response object](https://platform.excai.com/docs/api-reference/responses/object#responses/object-output).
 */
export type ItemRetrieveResponse =
  | Message
  | Shared.FunctionToolCallResource
  | Shared.FunctionToolCallOutputResource
  | Shared.FileSearchToolCall
  | Shared.WebSearchToolCall
  | Shared.ImageGenToolCall
  | Shared.ComputerToolCall
  | Shared.ComputerToolCallOutputResource
  | Shared.ReasoningItem
  | Shared.CodeInterpreterToolCall
  | Shared.LocalShellToolCall
  | Shared.LocalShellToolCallOutput
  | Shared.McpListTools
  | Shared.McpApprovalRequest
  | Shared.McpApprovalResponseResource
  | Shared.McpToolCall
  | Shared.CustomToolCall
  | CustomToolCallOutput;

/**
 * A list of Conversation items.
 */
export interface ItemListResponse {
  /**
   * A list of conversation items.
   */
  data: Array<
    | Message
    | Shared.FunctionToolCallResource
    | Shared.FunctionToolCallOutputResource
    | Shared.FileSearchToolCall
    | Shared.WebSearchToolCall
    | Shared.ImageGenToolCall
    | Shared.ComputerToolCall
    | Shared.ComputerToolCallOutputResource
    | Shared.ReasoningItem
    | Shared.CodeInterpreterToolCall
    | Shared.LocalShellToolCall
    | Shared.LocalShellToolCallOutput
    | Shared.McpListTools
    | Shared.McpApprovalRequest
    | Shared.McpApprovalResponseResource
    | Shared.McpToolCall
    | Shared.CustomToolCall
    | CustomToolCallOutput
  >;

  /**
   * The ID of the first item in the list.
   */
  first_id: string;

  /**
   * Whether there are more items available.
   */
  has_more: boolean;

  /**
   * The ID of the last item in the list.
   */
  last_id: string;

  /**
   * The type of object returned, must be `list`.
   */
  object: 'list';
}

export interface ItemDeleteResponse {
  /**
   * The unique ID of the conversation.
   */
  id: string;

  /**
   * The time at which the conversation was created, measured in seconds since the
   * Unix epoch.
   */
  created_at: number;

  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful
   * for storing additional information about the object in a structured format, and
   * querying for objects via API or the dashboard. Keys are strings with a maximum
   * length of 64 characters. Values are strings with a maximum length of 512
   * characters.
   */
  metadata: unknown;

  /**
   * The object type, which is always `conversation`.
   */
  object: 'conversation';
}

export interface ItemCreateParams {
  /**
   * The items to add to the conversation. You may add up to 20 items at a time.
   */
  items: Array<
    | RunsAPI.EasyInputMessage
    | ItemCreateParams.Message
    | ResponsesAPI.OutputMessage
    | Shared.FileSearchToolCall
    | Shared.ComputerToolCall
    | ItemCreateParams.ComputerCallOutput
    | Shared.WebSearchToolCall
    | ResponsesAPI.FunctionToolCall
    | ItemCreateParams.FunctionCallOutput
    | Shared.ReasoningItem
    | Shared.ImageGenToolCall
    | Shared.CodeInterpreterToolCall
    | Shared.LocalShellToolCall
    | Shared.LocalShellToolCallOutput
    | Shared.McpListTools
    | Shared.McpApprovalRequest
    | ItemCreateParams.McpApprovalResponse
    | Shared.McpToolCall
    | CustomToolCallOutput
    | Shared.CustomToolCall
    | ItemCreateParams.ItemReference
  >;
}

export namespace ItemCreateParams {
  /**
   * A message input to the model with a role indicating instruction following
   * hierarchy. Instructions given with the `developer` or `system` role take
   * precedence over instructions given with the `user` role.
   */
  export interface Message {
    /**
     * A list of one or many input items to the model, containing different content
     * types.
     */
    content: Array<
      Shared.InputTextContent | Shared.InputImageContent | Shared.InputFileContent | Shared.InputAudio
    >;

    /**
     * The role of the message input. One of `user`, `system`, or `developer`.
     */
    role: 'user' | 'system' | 'developer';

    /**
     * The status of item. One of `in_progress`, `completed`, or `incomplete`.
     * Populated when items are returned via API.
     */
    status?: 'in_progress' | 'completed' | 'incomplete';

    /**
     * The type of the message input. Always set to `message`.
     */
    type?: 'message';
  }

  /**
   * The output of a computer tool call.
   */
  export interface ComputerCallOutput {
    /**
     * The ID of the computer tool call that produced the output.
     */
    call_id: string;

    /**
     * A computer screenshot image used with the computer use tool.
     */
    output: Shared.ComputerScreenshotImage;

    /**
     * The type of the computer tool call output. Always `computer_call_output`.
     */
    type: 'computer_call_output';

    /**
     * The ID of the computer tool call output.
     */
    id?: string | null;

    /**
     * The safety checks reported by the API that have been acknowledged by the
     * developer.
     */
    acknowledged_safety_checks?: Array<ComputerCallOutput.AcknowledgedSafetyCheck> | null;

    /**
     * The status of the message input. One of `in_progress`, `completed`, or
     * `incomplete`. Populated when input items are returned via API.
     */
    status?: 'in_progress' | 'completed' | 'incomplete' | null;
  }

  export namespace ComputerCallOutput {
    /**
     * A pending safety check for the computer call.
     */
    export interface AcknowledgedSafetyCheck {
      /**
       * The ID of the pending safety check.
       */
      id: string;

      /**
       * The type of the pending safety check.
       */
      code?: string | null;

      /**
       * Details about the pending safety check.
       */
      message?: string | null;
    }
  }

  /**
   * The output of a function tool call.
   */
  export interface FunctionCallOutput {
    /**
     * The unique ID of the function tool call generated by the model.
     */
    call_id: string;

    /**
     * Text, image, or file output of the function tool call.
     */
    output:
      | string
      | Array<FunctionCallOutput.InputText | FunctionCallOutput.InputImage | FunctionCallOutput.InputFile>;

    /**
     * The type of the function tool call output. Always `function_call_output`.
     */
    type: 'function_call_output';

    /**
     * The unique ID of the function tool call output. Populated when this item is
     * returned via API.
     */
    id?: string | null;

    /**
     * The status of the item. One of `in_progress`, `completed`, or `incomplete`.
     * Populated when items are returned via API.
     */
    status?: 'in_progress' | 'completed' | 'incomplete' | null;
  }

  export namespace FunctionCallOutput {
    /**
     * A text input to the model.
     */
    export interface InputText {
      /**
       * The text input to the model.
       */
      text: string;

      /**
       * The type of the input item. Always `input_text`.
       */
      type: 'input_text';
    }

    /**
     * An image input to the model. Learn about
     * [image inputs](https://platform.excai.com/docs/guides/vision)
     */
    export interface InputImage {
      /**
       * The type of the input item. Always `input_image`.
       */
      type: 'input_image';

      /**
       * The detail level of the image to be sent to the model. One of `high`, `low`, or
       * `auto`. Defaults to `auto`.
       */
      detail?: 'low' | 'high' | 'auto' | null;

      /**
       * The ID of the file to be sent to the model.
       */
      file_id?: string | null;

      /**
       * The URL of the image to be sent to the model. A fully qualified URL or base64
       * encoded image in a data URL.
       */
      image_url?: string | null;
    }

    /**
     * A file input to the model.
     */
    export interface InputFile {
      /**
       * The type of the input item. Always `input_file`.
       */
      type: 'input_file';

      /**
       * The base64-encoded data of the file to be sent to the model.
       */
      file_data?: string | null;

      /**
       * The ID of the file to be sent to the model.
       */
      file_id?: string | null;

      /**
       * The URL of the file to be sent to the model.
       */
      file_url?: string | null;

      /**
       * The name of the file to be sent to the model.
       */
      filename?: string | null;
    }
  }

  /**
   * A response to an MCP approval request.
   */
  export interface McpApprovalResponse {
    /**
     * The ID of the approval request being answered.
     */
    approval_request_id: string;

    /**
     * Whether the request was approved.
     */
    approve: boolean;

    /**
     * The type of the item. Always `mcp_approval_response`.
     */
    type: 'mcp_approval_response';

    /**
     * The unique ID of the approval response
     */
    id?: string | null;

    /**
     * Optional reason for the decision.
     */
    reason?: string | null;
  }

  /**
   * An internal identifier for an item to reference.
   */
  export interface ItemReference {
    /**
     * The ID of the item to reference.
     */
    id: string;

    /**
     * The type of item to reference. Always `item_reference`.
     */
    type?: 'item_reference' | null;
  }
}

export interface ItemListParams {
  /**
   * An item ID to list items after, used in pagination.
   */
  after?: string;

  /**
   * A limit on the number of objects to be returned. Limit can range between 1 and
   * 100, and the default is 20.
   */
  limit?: number;

  /**
   * The order to return the input items in. Default is `desc`.
   *
   * - `asc`: Return the input items in ascending order.
   * - `desc`: Return the input items in descending order.
   */
  order?: 'asc' | 'desc';
}

export declare namespace Items {
  export {
    type ComputerScreenshotContent as ComputerScreenshotContent,
    type CustomToolCallOutput as CustomToolCallOutput,
    type Message as Message,
    type SummaryTextContent as SummaryTextContent,
    type TextContent as TextContent,
    type ItemCreateResponse as ItemCreateResponse,
    type ItemRetrieveResponse as ItemRetrieveResponse,
    type ItemListResponse as ItemListResponse,
    type ItemDeleteResponse as ItemDeleteResponse,
    type ItemCreateParams as ItemCreateParams,
    type ItemListParams as ItemListParams,
  };
}
