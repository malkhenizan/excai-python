# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import Dict, Union, Iterable, Optional
from typing_extensions import Literal, Required, TypeAlias, TypedDict

__all__ = [
    "MessageCreateParams",
    "ContentArrayOfContentPart",
    "ContentArrayOfContentPartMessageContentImageFileObject",
    "ContentArrayOfContentPartMessageContentImageFileObjectImageFile",
    "ContentArrayOfContentPartMessageContentImageURLObject",
    "ContentArrayOfContentPartMessageContentImageURLObjectImageURL",
    "ContentArrayOfContentPartMessageRequestContentTextObject",
    "Attachment",
    "AttachmentTool",
    "AttachmentToolAssistantToolsCode",
    "AttachmentToolAssistantToolsFileSearchTypeOnly",
]


class MessageCreateParams(TypedDict, total=False):
    content: Required[Union[str, Iterable[ContentArrayOfContentPart]]]
    """The text contents of the message."""

    role: Required[Literal["user", "assistant"]]
    """The role of the entity that is creating the message. Allowed values include:

    - `user`: Indicates the message is sent by an actual user and should be used in
      most cases to represent user-generated messages.
    - `assistant`: Indicates the message is generated by the assistant. Use this
      value to insert messages from the assistant into the conversation.
    """

    attachments: Optional[Iterable[Attachment]]
    """A list of files attached to the message, and the tools they should be added to."""

    metadata: Optional[Dict[str, str]]
    """Set of 16 key-value pairs that can be attached to an object.

    This can be useful for storing additional information about the object in a
    structured format, and querying for objects via API or the dashboard.

    Keys are strings with a maximum length of 64 characters. Values are strings with
    a maximum length of 512 characters.
    """


class ContentArrayOfContentPartMessageContentImageFileObjectImageFile(TypedDict, total=False):
    file_id: Required[str]
    """The [File](/docs/api-reference/files) ID of the image in the message content.

    Set `purpose="vision"` when uploading the File if you need to later display the
    file content.
    """

    detail: Literal["auto", "low", "high"]
    """Specifies the detail level of the image if specified by the user.

    `low` uses fewer tokens, you can opt in to high resolution using `high`.
    """


class ContentArrayOfContentPartMessageContentImageFileObject(TypedDict, total=False):
    image_file: Required[ContentArrayOfContentPartMessageContentImageFileObjectImageFile]

    type: Required[Literal["image_file"]]
    """Always `image_file`."""


class ContentArrayOfContentPartMessageContentImageURLObjectImageURL(TypedDict, total=False):
    url: Required[str]
    """
    The external URL of the image, must be a supported image types: jpeg, jpg, png,
    gif, webp.
    """

    detail: Literal["auto", "low", "high"]
    """Specifies the detail level of the image.

    `low` uses fewer tokens, you can opt in to high resolution using `high`. Default
    value is `auto`
    """


class ContentArrayOfContentPartMessageContentImageURLObject(TypedDict, total=False):
    image_url: Required[ContentArrayOfContentPartMessageContentImageURLObjectImageURL]

    type: Required[Literal["image_url"]]
    """The type of the content part."""


class ContentArrayOfContentPartMessageRequestContentTextObject(TypedDict, total=False):
    text: Required[str]
    """Text content to be sent to the model"""

    type: Required[Literal["text"]]
    """Always `text`."""


ContentArrayOfContentPart: TypeAlias = Union[
    ContentArrayOfContentPartMessageContentImageFileObject,
    ContentArrayOfContentPartMessageContentImageURLObject,
    ContentArrayOfContentPartMessageRequestContentTextObject,
]


class AttachmentToolAssistantToolsCode(TypedDict, total=False):
    type: Required[Literal["code_interpreter"]]
    """The type of tool being defined: `code_interpreter`"""


class AttachmentToolAssistantToolsFileSearchTypeOnly(TypedDict, total=False):
    type: Required[Literal["file_search"]]
    """The type of tool being defined: `file_search`"""


AttachmentTool: TypeAlias = Union[AttachmentToolAssistantToolsCode, AttachmentToolAssistantToolsFileSearchTypeOnly]


class Attachment(TypedDict, total=False):
    file_id: str
    """The ID of the file to attach to the message."""

    tools: Iterable[AttachmentTool]
    """The tools to add this file to."""
