# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from typing import List, Union, Optional
from typing_extensions import Literal, Annotated, TypeAlias

from ..._utils import PropertyInfo
from ..._models import BaseModel

__all__ = [
    "CompletionGetMessagesResponse",
    "Data",
    "DataAnnotation",
    "DataAnnotationURLCitation",
    "DataAudio",
    "DataContentPart",
    "DataContentPartChatCompletionRequestMessageContentPartText",
    "DataContentPartChatCompletionRequestMessageContentPartImage",
    "DataContentPartChatCompletionRequestMessageContentPartImageImageURL",
    "DataFunctionCall",
    "DataToolCall",
    "DataToolCallFunction",
    "DataToolCallFunctionFunction",
    "DataToolCallCustom",
    "DataToolCallCustomCustom",
]


class DataAnnotationURLCitation(BaseModel):
    end_index: int
    """The index of the last character of the URL citation in the message."""

    start_index: int
    """The index of the first character of the URL citation in the message."""

    title: str
    """The title of the web resource."""

    url: str
    """The URL of the web resource."""


class DataAnnotation(BaseModel):
    type: Literal["url_citation"]
    """The type of the URL citation. Always `url_citation`."""

    url_citation: DataAnnotationURLCitation
    """A URL citation when using web search."""


class DataAudio(BaseModel):
    id: str
    """Unique identifier for this audio response."""

    data: str
    """
    Base64 encoded audio bytes generated by the model, in the format specified in
    the request.
    """

    expires_at: int
    """
    The Unix timestamp (in seconds) for when this audio response will no longer be
    accessible on the server for use in multi-turn conversations.
    """

    transcript: str
    """Transcript of the audio generated by the model."""


class DataContentPartChatCompletionRequestMessageContentPartText(BaseModel):
    text: str
    """The text content."""

    type: Literal["text"]
    """The type of the content part."""


class DataContentPartChatCompletionRequestMessageContentPartImageImageURL(BaseModel):
    url: str
    """Either a URL of the image or the base64 encoded image data."""

    detail: Optional[Literal["auto", "low", "high"]] = None
    """Specifies the detail level of the image.

    Learn more in the
    [Vision guide](https://platform.excai.com/docs/guides/vision#low-or-high-fidelity-image-understanding).
    """


class DataContentPartChatCompletionRequestMessageContentPartImage(BaseModel):
    image_url: DataContentPartChatCompletionRequestMessageContentPartImageImageURL

    type: Literal["image_url"]
    """The type of the content part."""


DataContentPart: TypeAlias = Union[
    DataContentPartChatCompletionRequestMessageContentPartText,
    DataContentPartChatCompletionRequestMessageContentPartImage,
]


class DataFunctionCall(BaseModel):
    arguments: str
    """
    The arguments to call the function with, as generated by the model in JSON
    format. Note that the model does not always generate valid JSON, and may
    hallucinate parameters not defined by your function schema. Validate the
    arguments in your code before calling your function.
    """

    name: str
    """The name of the function to call."""


class DataToolCallFunctionFunction(BaseModel):
    arguments: str
    """
    The arguments to call the function with, as generated by the model in JSON
    format. Note that the model does not always generate valid JSON, and may
    hallucinate parameters not defined by your function schema. Validate the
    arguments in your code before calling your function.
    """

    name: str
    """The name of the function to call."""


class DataToolCallFunction(BaseModel):
    id: str
    """The ID of the tool call."""

    function: DataToolCallFunctionFunction
    """The function that the model called."""

    type: Literal["function"]
    """The type of the tool. Currently, only `function` is supported."""


class DataToolCallCustomCustom(BaseModel):
    input: str
    """The input for the custom tool call generated by the model."""

    name: str
    """The name of the custom tool to call."""


class DataToolCallCustom(BaseModel):
    id: str
    """The ID of the tool call."""

    custom: DataToolCallCustomCustom
    """The custom tool that the model called."""

    type: Literal["custom"]
    """The type of the tool. Always `custom`."""


DataToolCall: TypeAlias = Annotated[Union[DataToolCallFunction, DataToolCallCustom], PropertyInfo(discriminator="type")]


class Data(BaseModel):
    id: str
    """The identifier of the chat message."""

    content: Optional[str] = None
    """The contents of the message."""

    refusal: Optional[str] = None
    """The refusal message generated by the model."""

    role: Literal["assistant"]
    """The role of the author of this message."""

    annotations: Optional[List[DataAnnotation]] = None
    """
    Annotations for the message, when applicable, as when using the
    [web search tool](https://platform.excai.com/docs/guides/tools-web-search?api-mode=chat).
    """

    audio: Optional[DataAudio] = None
    """
    If the audio output modality is requested, this object contains data about the
    audio response from the model.
    [Learn more](https://platform.excai.com/docs/guides/audio).
    """

    content_parts: Optional[List[DataContentPart]] = None
    """
    If a content parts array was provided, this is an array of `text` and
    `image_url` parts. Otherwise, null.
    """

    function_call: Optional[DataFunctionCall] = None
    """Deprecated and replaced by `tool_calls`.

    The name and arguments of a function that should be called, as generated by the
    model.
    """

    tool_calls: Optional[List[DataToolCall]] = None
    """The tool calls generated by the model, such as function calls."""


class CompletionGetMessagesResponse(BaseModel):
    data: List[Data]
    """An array of chat completion message objects."""

    first_id: str
    """The identifier of the first chat message in the data array."""

    has_more: bool
    """Indicates whether there are more chat messages available."""

    last_id: str
    """The identifier of the last chat message in the data array."""

    object: Literal["list"]
    """The type of this object. It is always set to "list"."""
